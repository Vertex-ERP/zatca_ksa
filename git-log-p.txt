commit 358b466c05fdeddc0cacfe844c7e9c407dafebe7
Author: Muhammad Nouman <nomi9639@gmail.com>
Date:   Tue Jun 4 15:38:44 2024 +0500

    Small Fix

diff --git a/zatca_ksa/zatca_ksa/sign_invoice.py b/zatca_ksa/zatca_ksa/sign_invoice.py
index 4c7af1f..5848b8d 100644
--- a/zatca_ksa/zatca_ksa/sign_invoice.py
+++ b/zatca_ksa/zatca_ksa/sign_invoice.py
@@ -230,11 +230,13 @@ def create_CSID():
                     'OTP': settings.otp,
                     'Accept-Version': 'V2',
                     'Content-Type': 'application/json',
-                    'Cookie': 'TS0106293e=0132a679c07382ce7821148af16b99da546c13ce1dcddbef0e19802eb470e539a4d39d5ef63d5c8280b48c529f321e8b0173890e4f'
                     }
+
+                    print(headers)
+                    print(get_API_url(base_url="compliance"))
                     
                     response = requests.request("POST", url=get_API_url(base_url="compliance"), headers=headers, data=payload)
-                
+                    print(str(response.content))
                     if response.status_code == 400:
                         frappe.throw("Error: " + "OTP is not valid", response.text)
                     if response.status_code != 200:
@@ -507,19 +509,20 @@ def extract_public_key_data():
 
 
 def get_tlv_for_value(tag_num, tag_value):
-                try:
-                    tag_num_buf = bytes([tag_num])
-                    if isinstance(tag_value, str):
-                        if len(tag_value) < 256:
-                            tag_value_len_buf = bytes([len(tag_value)])
-                        else:
-                            tag_value_len_buf = bytes([0xFF, (len(tag_value) >> 8) & 0xFF, len(tag_value) & 0xFF])
-                        tag_value = tag_value.encode('utf-8')
-                    else:
-                        tag_value_len_buf = bytes([len(tag_value)])
-                    return tag_num_buf + tag_value_len_buf + tag_value
-                except Exception as e:
-                    frappe.throw(" error in getting the tlv data value: "+ str(e) )
+    print([tag_num, tag_value])
+    try:
+        tag_num_buf = bytes([tag_num])
+        if isinstance(tag_value, str):
+            if len(tag_value) < 256:
+                tag_value_len_buf = bytes([len(tag_value)])
+            else:
+                tag_value_len_buf = bytes([0xFF, (len(tag_value) >> 8) & 0xFF, len(tag_value) & 0xFF])
+            tag_value = tag_value.encode('utf-8')
+        else:
+            tag_value_len_buf = bytes([len(tag_value)])
+        return tag_num_buf + tag_value_len_buf + tag_value
+    except Exception as e:
+        frappe.throw(" error in getting the tlv data value: "+ str(e) )
 
 
 def tag8_publickey():
@@ -562,57 +565,57 @@ def tag9_signature_ecdsa():
 
 
 def generate_tlv_xml():
-                    try:
-                            with open(frappe.local.site + "/private/files/final_xml_after_sign.xml", 'rb') as file:
-                                xml_data = file.read()
-                            root = etree.fromstring(xml_data)
-                            namespaces = {
-                                'ubl': 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2',
-                                'cac': 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2',
-                                'cbc': 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2',
-                                'ext': 'urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2',
-                                'sig': 'urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2',
-                                'sac': 'urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2',
-                                'ds': 'http://www.w3.org/2000/09/xmldsig#'
-                            }
-                            issue_date_xpath = "/ubl:Invoice/cbc:IssueDate"
-                            issue_time_xpath = "/ubl:Invoice/cbc:IssueTime"
-                            issue_date_results = root.xpath(issue_date_xpath, namespaces=namespaces)
-                            issue_time_results = root.xpath(issue_time_xpath, namespaces=namespaces)
-                            issue_date = issue_date_results[0].text.strip() if issue_date_results else 'Missing Data'
-                            issue_time = issue_time_results[0].text.strip() if issue_time_results else 'Missing Data'
-                            issue_date_time = issue_date + 'T' + issue_time 
-                            tags_xpaths = [
-                                (1, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:RegistrationName"),
-                                (2, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme/cbc:CompanyID"),
-                                (3, None),  
-                                (4, "/ubl:Invoice/cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount"),
-                                (5, "/ubl:Invoice/cac:TaxTotal/cbc:TaxAmount"),
-                                (6, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestValue"),
-                                (7, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignatureValue"),
-                                (8, None), 
-                                (9, None) ,
-                            ]
-                            result_dict = {}
-                            for tag, xpath in tags_xpaths:
-                                if isinstance(xpath, str):  
-                                    elements = root.xpath(xpath, namespaces=namespaces)
-                                    if elements:
-                                        value = elements[0].text if isinstance(elements[0], etree._Element) else elements[0]
-                                        result_dict[tag] = value
-                                    else:
-                                        result_dict[tag] = 'Not found'
-                                else:
-                                    result_dict[tag] = xpath  
-                            
-                            result_dict[3] = issue_date_time
-                            result_dict[8] = tag8_publickey()
-                            
-                            result_dict[9] = tag9_signature_ecdsa()
-                            
-                            return result_dict
-                    except Exception as e:
-                        frappe.throw(" error in getting the entire tlv data: "+ str(e) )
+    try:
+        with open(frappe.local.site + "/private/files/final_xml_after_sign.xml", 'rb') as file:
+            xml_data = file.read()
+        root = etree.fromstring(xml_data)
+        namespaces = {
+            'ubl': 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2',
+            'cac': 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2',
+            'cbc': 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2',
+            'ext': 'urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2',
+            'sig': 'urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2',
+            'sac': 'urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2',
+            'ds': 'http://www.w3.org/2000/09/xmldsig#'
+        }
+        issue_date_xpath = "/ubl:Invoice/cbc:IssueDate"
+        issue_time_xpath = "/ubl:Invoice/cbc:IssueTime"
+        issue_date_results = root.xpath(issue_date_xpath, namespaces=namespaces)
+        issue_time_results = root.xpath(issue_time_xpath, namespaces=namespaces)
+        issue_date = issue_date_results[0].text.strip() if issue_date_results else 'Missing Data'
+        issue_time = issue_time_results[0].text.strip() if issue_time_results else 'Missing Data'
+        issue_date_time = issue_date + 'T' + issue_time 
+        tags_xpaths = [
+            (1, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:RegistrationName"),
+            (2, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme/cbc:CompanyID"),
+            (3, None),  
+            (4, "/ubl:Invoice/cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount"),
+            (5, "/ubl:Invoice/cac:TaxTotal/cbc:TaxAmount"),
+            (6, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestValue"),
+            (7, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignatureValue"),
+            (8, None), 
+            (9, None) ,
+        ]
+        result_dict = {}
+        for tag, xpath in tags_xpaths:
+            if isinstance(xpath, str):  
+                elements = root.xpath(xpath, namespaces=namespaces)
+                if elements:
+                    value = elements[0].text if isinstance(elements[0], etree._Element) else elements[0]
+                    result_dict[tag] = value
+                else:
+                    result_dict[tag] = 'Not found'
+            else:
+                result_dict[tag] = xpath  
+        
+        result_dict[3] = issue_date_time
+        result_dict[8] = tag8_publickey()
+        
+        result_dict[9] = tag9_signature_ecdsa()
+        
+        return result_dict
+    except Exception as e:
+        frappe.throw(" error in getting the entire tlv data: "+ str(e) )
 
 
 def update_Qr_toXml(qrCodeB64):
@@ -1091,6 +1094,7 @@ def zatca_Call(invoice_number, compliance_type="0", any_item_has_tax_template= F
                             tlv_data = generate_tlv_xml()
                             # print(tlv_data)
                             tagsBufsArray = []
+                            print(tlv_data)
                             for tag_num, tag_value in tlv_data.items():
                                 tagsBufsArray.append(get_tlv_for_value(tag_num, tag_value))
                             qrCodeBuf = b"".join(tagsBufsArray)
@@ -1183,6 +1187,7 @@ def zatca_Call_compliance(invoice_number, compliance_type="0",any_item_has_tax_t
                             populate_The_UBL_Extensions_Output(encoded_signature,namespaces,signed_properties_base64,encoded_hash)
                             tlv_data = generate_tlv_xml()
                             tagsBufsArray = []
+                            print(tlv_data)
                             for tag_num, tag_value in tlv_data.items():
                                 tagsBufsArray.append(get_tlv_for_value(tag_num, tag_value))
                             qrCodeBuf = b"".join(tagsBufsArray)
@@ -1250,63 +1255,54 @@ def zatca_Background(invoice_number):
 
 
 @frappe.whitelist(allow_guest=True)          
-def zatca_Background_on_submit(doc, method=None):              
-# def zatca_Background(invoice_number):
-                    
-                    try:
-                        sales_invoice_doc = doc
-                        invoice_number = sales_invoice_doc.name
-                        sales_invoice_doc= frappe.get_doc("Sales Invoice",invoice_number )
-                        settings = frappe.get_doc('Zatca KSA Setting')
-                        any_item_has_tax_template = False
+def zatca_Background_on_submit(doc, method=None):          
+    try:
+        sales_invoice_doc = doc
+        invoice_number = sales_invoice_doc.name
+        sales_invoice_doc= frappe.get_doc("Sales Invoice",invoice_number )
+        settings = frappe.get_doc('Zatca KSA Setting')
+        any_item_has_tax_template = False
+
+        for item in sales_invoice_doc.items:
+            if item.item_tax_template:
+                any_item_has_tax_template = True
+                break
         
-                        for item in sales_invoice_doc.items:
-                            if item.item_tax_template:
-                                any_item_has_tax_template = True
-                                break
-                        
-                        if any_item_has_tax_template:
-                            for item in sales_invoice_doc.items:
-                                if not item.item_tax_template:
-                                    frappe.throw("If any one item has an Item Tax Template, all items must have an Item Tax Template.")
+        if any_item_has_tax_template:
+            for item in sales_invoice_doc.items:
+                if not item.item_tax_template:
+                    frappe.throw("If any one item has an Item Tax Template, all items must have an Item Tax Template.")
+
+        for item in sales_invoice_doc.items:
+            if item.item_tax_template:
+                item_tax_template = frappe.get_doc('Item Tax Template', item.item_tax_template)
+                zatca_tax_category = item_tax_template.custom_zatca_tax_category
+                for tax in item_tax_template.taxes:
+                    tax_rate = float(tax.tax_rate)
+                    
+                    if f"{tax_rate:.2f}" not in ['5.00', '15.00'] and zatca_tax_category not in ["Zero Rated", "Exempted", "Services outside scope of tax / Not subject to VAT"]:
+                        frappe.throw("Zatca tax category should be 'Zero Rated', 'Exempted' or 'Services outside scope of tax / Not subject to VAT' for items with tax rate not equal to 5.00 or 15.00.")
+                    
+                    if f"{tax_rate:.2f}" == '15.00' and zatca_tax_category != "Standard":
+                        frappe.throw("Check the Zatca category code and enable it as standard.")
 
-                        for item in sales_invoice_doc.items:
-                            if item.item_tax_template:
-                                item_tax_template = frappe.get_doc('Item Tax Template', item.item_tax_template)
-                                zatca_tax_category = item_tax_template.custom_zatca_tax_category
-                                for tax in item_tax_template.taxes:
-                                    tax_rate = float(tax.tax_rate)
-                                    
-                                    if f"{tax_rate:.2f}" not in ['5.00', '15.00'] and zatca_tax_category not in ["Zero Rated", "Exempted", "Services outside scope of tax / Not subject to VAT"]:
-                                        frappe.throw("Zatca tax category should be 'Zero Rated', 'Exempted' or 'Services outside scope of tax / Not subject to VAT' for items with tax rate not equal to 5.00 or 15.00.")
-                                    
-                                    if f"{tax_rate:.2f}" == '15.00' and zatca_tax_category != "Standard":
-                                        frappe.throw("Check the Zatca category code and enable it as standard.")
+        if settings.zatca_invoice_enabled != 1:
+            return
+            #frappe.throw("Zatca Invoice is not enabled in Zatca Settings, Please contact your system administrator")
+        
+        if not frappe.db.exists("Sales Invoice", invoice_number):
+                frappe.throw("Please save and submit the invoice before sending to Zatca:  " + str(invoice_number))
+                                
+        
 
-                        if settings.zatca_invoice_enabled != 1:
-                            frappe.throw("Zatca Invoice is not enabled in Zatca Settings, Please contact your system administrator")
-                        
-                        if not frappe.db.exists("Sales Invoice", invoice_number):
-                                frappe.throw("Please save and submit the invoice before sending to Zatca:  " + str(invoice_number))
-                                                
-                        
+        if sales_invoice_doc.docstatus in [0,2]:
+            frappe.throw("Please submit the invoice before sending to Zatca:  " + str(invoice_number))
             
-                        if sales_invoice_doc.docstatus in [0,2]:
-                            frappe.throw("Please submit the invoice before sending to Zatca:  " + str(invoice_number))
-                            
-                        if sales_invoice_doc.custom_zatca_status == "REPORTED" or sales_invoice_doc.custom_zatca_status == "CLEARED":
-                            frappe.throw("Already submitted to Zakat and Tax Authority")
-                        
-                        zatca_Call(invoice_number,0,any_item_has_tax_template)
-                        
-                    except Exception as e:
-                        frappe.throw("Error in background call:  " + str(e) )
-                    
-# #                     # frappe.enqueue(
-#                     #         zatca_Call,
-#                     #         queue="short",
-#                     #         timeout=200,
-#                     #         invoice_number=invoice_number)
-#                     # frappe.msgprint("queued")
-
+        if sales_invoice_doc.custom_zatca_status == "REPORTED" or sales_invoice_doc.custom_zatca_status == "CLEARED":
+            frappe.throw("Already submitted to Zakat and Tax Authority")
+        
+        zatca_Call(invoice_number,0,any_item_has_tax_template)
+        
+    except Exception as e:
+        frappe.throw("Error in background call:  " + str(e) )
 

commit cdb9dc63dabd28bfa0bb596dac4931c79588e782
Author: Muhammad Nouman <nomi9639@gmail.com>
Date:   Sun Jun 2 16:48:48 2024 +0500

    ZATCA Integration

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..ba04025
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,7 @@
+.DS_Store
+*.pyc
+*.egg-info
+*.swp
+tags
+node_modules
+__pycache__
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..b55bb18
--- /dev/null
+++ b/README.md
@@ -0,0 +1,50 @@
+Saudi Arabian E-Invoicing Zatca Phase-2
+A Frappe ERPNext App for users in Saudi Arabia, to be compliant with country tax laws
+
+Features:
+
+Creates CSR by sending API to Zatca
+
+Creates Compliance token
+
+Do system compliance test as per Zatca UBL formats
+
+Send API compliance test
+
+Get Production token
+
+Send Standard invoices for Clearance to Zatca
+
+Send Simplified invoices for Reporting
+
+Send Credit notes, debit notes for both Clearance and Reporting
+
+Get QR Code from Zatca
+
+Attach QR COde from zatca on the invoices.
+
+Keep success_log for Zatca for future reference
+
+Error logs in case of error
+
+Reports to compare with Zatca portal statitics.
+
+Installation and Troubleshooting
+
+Frappe Cloud users can install it from Marketplace
+
+Others can follow standard Frappe methods for installing apps. Please see it here below bench
+
+get-app https://github.com/KSA/zatca_ksa.git
+
+bench --site yoursite.ksa.com install-app zatca_ksa
+
+bench --site yoursite.ksa.com migrate
+
+Goto Help->About and make sure you have Zatca app installaed.
+
+We have published a video tutorial on how to use this . ( https://www.youtube.com/watch?v=P0ChplXoKYg )
+
+Please contact support@KSA.com for implementation support or customization.
+
+Husna M
\ No newline at end of file
diff --git a/license.txt b/license.txt
new file mode 100644
index 0000000..8aa2645
--- /dev/null
+++ b/license.txt
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) [year] [fullname]
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..b72c828
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,20 @@
+[project]
+name = "zatca_ksa"
+authors = [
+    { name = "KSA", email = "support@KSA.com"}
+]
+description = "Implementaiton of Saudi E-Invoicing Phase-2 on Frappe ERPNext"
+requires-python = ">=3.10"
+readme = "README.md"
+dynamic = ["version"]
+dependencies = [
+    # "frappe~=15.0.0" # Installed and managed by bench.
+]
+
+[build-system]
+requires = ["flit_core >=3.4,<4"]
+build-backend = "flit_core.buildapi"
+
+# These dependencies are only installed when developer mode is enabled
+[tool.bench.dev-dependencies]
+# package_name = "~=1.1.0"
diff --git a/zatca_ksa/README.md b/zatca_ksa/README.md
new file mode 100644
index 0000000..7bfc2b9
--- /dev/null
+++ b/zatca_ksa/README.md
@@ -0,0 +1 @@
+# zatca_ksa
diff --git a/zatca_ksa/__init__.py b/zatca_ksa/__init__.py
new file mode 100644
index 0000000..7a0660b
--- /dev/null
+++ b/zatca_ksa/__init__.py
@@ -0,0 +1,3 @@
+
+__version__ = '0.0.1'
+
diff --git a/zatca_ksa/config/__init__.py b/zatca_ksa/config/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/fixtures/custom_field.json b/zatca_ksa/fixtures/custom_field.json
new file mode 100644
index 0000000..d8b0a60
--- /dev/null
+++ b/zatca_ksa/fixtures/custom_field.json
@@ -0,0 +1,380 @@
+[
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 0,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": null,
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Customer",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_b2c",
+  "fieldtype": "Check",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "customer_name",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Zatca type Simplified ( B2C ) ",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-23 09:24:12.252762",
+  "module": "Zatca KSA",
+  "name": "Customer-custom_b2c",
+  "no_copy": 0,
+  "non_negative": 0,
+  "options": null,
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 0,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 0,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 1,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": "Not submitted",
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Sales Invoice",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_uuid",
+  "fieldtype": "Small Text",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "tax_id",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "UUID",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-23 09:24:02.122209",
+  "module": "Zatca KSA",
+  "name": "Sales Invoice-custom_uuid",
+  "no_copy": 1,
+  "non_negative": 0,
+  "options": null,
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 1,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 0,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": null,
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Item Tax Template",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_zatca_tax_category",
+  "fieldtype": "Select",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "tax_details_section",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Zatca Tax Category",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-31 11:24:19.315563",
+  "module": "Zatca KSA",
+  "name": "Item Tax Template-custom_zatca_tax_category",
+  "no_copy": 0,
+  "non_negative": 0,
+  "options": "Standard\nZero Rated\nExempted\nServices outside scope of tax / Not subject to VAT",
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 0,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 0,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": null,
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Item Tax Template",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_exemption_reason_code",
+  "fieldtype": "Select",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "custom_zatca_tax_category",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Exemption Reason Code",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-31 11:24:07.523408",
+  "module": "Zatca KSA",
+  "name": "Item Tax Template-custom_exemption_reason_code",
+  "no_copy": 0,
+  "non_negative": 0,
+  "options": "VATEX-SA-29\nVATEX-SA-29-7\nVATEX-SA-30\nVATEX-SA-32\nVATEX-SA-33\nVATEX-SA-34-1\nVATEX-SA-34-2\nVATEX-SA-34-3\nVATEX-SA-34-4\nVATEX-SA-34-5\nVATEX-SA-35\nVATEX-SA-36\nVATEX-SA-EDU\nVATEX-SA-HEA\nVATEX-SA-MLTRY\nVATEX-SA-OOS",
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 0,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 1,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": "Not Submitted",
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Sales Invoice",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_zatca_status",
+  "fieldtype": "Data",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "due_date",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Zatca Status",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-23 09:23:52.442718",
+  "module": "Zatca KSA",
+  "name": "Sales Invoice-custom_zatca_status",
+  "no_copy": 1,
+  "non_negative": 0,
+  "options": null,
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 1,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 0,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": null,
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Sales Invoice",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_zatca_tax_category",
+  "fieldtype": "Select",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "custom_zatca_status",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Zatca Tax Category",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-23 09:23:40.323968",
+  "module": "Zatca KSA",
+  "name": "Sales Invoice-custom_zatca_tax_category",
+  "no_copy": 0,
+  "non_negative": 0,
+  "options": "Standard\nZero Rated\nExempted\nServices outside scope of tax / Not subject to VAT",
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 0,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ },
+ {
+  "allow_in_quick_entry": 0,
+  "allow_on_submit": 0,
+  "bold": 0,
+  "collapsible": 0,
+  "collapsible_depends_on": null,
+  "columns": 0,
+  "default": null,
+  "depends_on": null,
+  "description": null,
+  "docstatus": 0,
+  "doctype": "Custom Field",
+  "dt": "Sales Invoice",
+  "fetch_from": null,
+  "fetch_if_empty": 0,
+  "fieldname": "custom_exemption_reason_code",
+  "fieldtype": "Select",
+  "hidden": 0,
+  "hide_border": 0,
+  "hide_days": 0,
+  "hide_seconds": 0,
+  "ignore_user_permissions": 0,
+  "ignore_xss_filter": 0,
+  "in_global_search": 0,
+  "in_list_view": 0,
+  "in_preview": 0,
+  "in_standard_filter": 0,
+  "insert_after": "custom_zatca_tax_category",
+  "is_system_generated": 0,
+  "is_virtual": 0,
+  "label": "Exemption Reason Code",
+  "length": 0,
+  "mandatory_depends_on": null,
+  "modified": "2024-05-23 09:23:30.344420",
+  "module": "Zatca KSA",
+  "name": "Sales Invoice-custom_exemption_reason_code",
+  "no_copy": 0,
+  "non_negative": 0,
+  "options": "VATEX-SA-29\nVATEX-SA-29-7\nVATEX-SA-30\nVATEX-SA-32\nVATEX-SA-33\nVATEX-SA-34-1\nVATEX-SA-34-2\nVATEX-SA-34-3\nVATEX-SA-34-4\nVATEX-SA-34-5\nVATEX-SA-35\nVATEX-SA-36 \nVATEX-SA-EDU\nVATEX-SA-HEA \nVATEX-SA-MLTRY\nVATEX-SA-OOS",
+  "permlevel": 0,
+  "precision": "",
+  "print_hide": 0,
+  "print_hide_if_no_value": 0,
+  "print_width": null,
+  "read_only": 0,
+  "read_only_depends_on": null,
+  "report_hide": 0,
+  "reqd": 0,
+  "search_index": 0,
+  "sort_options": 0,
+  "translatable": 1,
+  "unique": 0,
+  "width": null
+ }
+]
\ No newline at end of file
diff --git a/zatca_ksa/hooks.py b/zatca_ksa/hooks.py
new file mode 100644
index 0000000..8f5fb46
--- /dev/null
+++ b/zatca_ksa/hooks.py
@@ -0,0 +1,230 @@
+app_name = "zatca_ksa"
+app_title = "Zatca KSA"
+app_publisher = "KSA"
+app_description = "Implementaiton of Saudi E-Invoicing Phase-2 on Frappe ERPNext"
+app_email = "support@KSA.com"
+app_license = "mit"
+# required_apps = []
+
+# Includes in <head>
+# ------------------
+
+# include js, css files in header of desk.html
+# app_include_css = "/assets/zatca_ksa/css/zatca_ksa.css"
+# app_include_js = "/assets/zatca_ksa/js/zatca_ksa.js"
+
+# include js, css files in header of web template
+# web_include_css = "/assets/zatca_ksa/css/zatca_ksa.css"
+# web_include_js = "/assets/zatca_ksa/js/zatca_ksa.js"
+
+# include custom scss in every website theme (without file extension ".scss")
+# website_theme_scss = "zatca_ksa/public/scss/website"
+
+# include js, css files in header of web form
+# webform_include_js = {"doctype": "public/js/doctype.js"}
+# webform_include_css = {"doctype": "public/css/doctype.css"}
+
+# include js in page
+# page_js = {"page" : "public/js/file.js"}
+
+# include js in doctype views
+# doctype_js = {"doctype" : "public/js/doctype.js"}
+# doctype_list_js = {"doctype" : "public/js/doctype_list.js"}
+# doctype_tree_js = {"doctype" : "public/js/doctype_tree.js"}
+# doctype_calendar_js = {"doctype" : "public/js/doctype_calendar.js"}
+
+# Home Pages
+# ----------
+
+# application home page (will override Website Settings)
+# home_page = "login"
+
+# website user home page (by Role)
+# role_home_page = {
+#	"Role": "home_page"
+# }
+
+# Generators
+# ----------
+
+# automatically create page for each record of this doctype
+# website_generators = ["Web Page"]
+
+# Jinja
+# ----------
+
+# add methods and filters to jinja environment
+# jinja = {
+#	"methods": "zatca_ksa.utils.jinja_methods",
+#	"filters": "zatca_ksa.utils.jinja_filters"
+# }
+
+# Installation
+# ------------
+
+# before_install = "zatca_ksa.install.before_install"
+# after_install = "zatca_ksa.install.after_install"
+
+# Uninstallation
+# ------------
+
+# before_uninstall = "zatca_ksa.uninstall.before_uninstall"
+# after_uninstall = "zatca_ksa.uninstall.after_uninstall"
+
+# Integration Setup
+# ------------------
+# To set up dependencies/integrations with other apps
+# Name of the app being installed is passed as an argument
+
+# before_app_install = "zatca_ksa.utils.before_app_install"
+# after_app_install = "zatca_ksa.utils.after_app_install"
+
+# Integration Cleanup
+# -------------------
+# To clean up dependencies/integrations with other apps
+# Name of the app being uninstalled is passed as an argument
+
+# before_app_uninstall = "zatca_ksa.utils.before_app_uninstall"
+# after_app_uninstall = "zatca_ksa.utils.after_app_uninstall"
+
+# Desk Notifications
+# ------------------
+# See frappe.core.notifications.get_notification_config
+
+# notification_config = "zatca_ksa.notifications.get_notification_config"
+
+# Permissions
+# -----------
+# Permissions evaluated in scripted ways
+
+# permission_query_conditions = {
+#	"Event": "frappe.desk.doctype.event.event.get_permission_query_conditions",
+# }
+#
+# has_permission = {
+#	"Event": "frappe.desk.doctype.event.event.has_permission",
+# }
+
+# DocType Class
+# ---------------
+# Override standard doctype classes
+
+# override_doctype_class = {
+#	"ToDo": "custom_app.overrides.CustomToDo"
+# }
+
+# Document Events
+# ---------------
+# Hook on document methods and events
+
+# doc_events = {
+#	"*": {
+#		"on_update": "method",
+#		"on_cancel": "method",
+#		"on_trash": "method"
+#	}
+# }
+
+# Scheduled Tasks
+# ---------------
+
+# scheduler_events = {
+#	"all": [
+#		"zatca_ksa.tasks.all"
+#	],
+#	"daily": [
+#		"zatca_ksa.tasks.daily"
+#	],
+#	"hourly": [
+#		"zatca_ksa.tasks.hourly"
+#	],
+#	"weekly": [
+#		"zatca_ksa.tasks.weekly"
+#	],
+#	"monthly": [
+#		"zatca_ksa.tasks.monthly"
+#	],
+# }
+
+# Testing
+# -------
+
+# before_tests = "zatca_ksa.install.before_tests"
+
+# Overriding Methods
+# ------------------------------
+#
+# override_whitelisted_methods = {
+#	"frappe.desk.doctype.event.event.get_events": "zatca_ksa.event.get_events"
+# }
+#
+# each overriding function accepts a `data` argument;
+# generated from the base implementation of the doctype dashboard,
+# along with any modifications made in other Frappe apps
+# override_doctype_dashboards = {
+#	"Task": "zatca_ksa.task.get_dashboard_data"
+# }
+
+# exempt linked doctypes from being automatically cancelled
+#
+# auto_cancel_exempted_doctypes = ["Auto Repeat"]
+
+# Ignore links to specified DocTypes when deleting documents
+# -----------------------------------------------------------
+
+# ignore_links_on_delete = ["Communication", "ToDo"]
+
+# Request Events
+# ----------------
+# before_request = ["zatca_ksa.utils.before_request"]
+# after_request = ["zatca_ksa.utils.after_request"]
+
+# Job Events
+# ----------
+# before_job = ["zatca_ksa.utils.before_job"]
+# after_job = ["zatca_ksa.utils.after_job"]
+
+# User Data Protection
+# --------------------
+
+# user_data_fields = [
+#	{
+#		"doctype": "{doctype_1}",
+#		"filter_by": "{filter_by}",
+#		"redact_fields": ["{field_1}", "{field_2}"],
+#		"partial": 1,
+#	},
+#	{
+#		"doctype": "{doctype_2}",
+#		"filter_by": "{filter_by}",
+#		"partial": 1,
+#	},
+#	{
+#		"doctype": "{doctype_3}",
+#		"strict": False,
+#	},
+#	{
+#		"doctype": "{doctype_4}"
+#	}
+# ]
+
+# Authentication and authorization
+# --------------------------------
+
+# auth_hooks = [
+#	"zatca_ksa.auth.validate"
+# ]
+
+doc_events = {
+    "Sales Invoice": {
+        "before_cancel": "zatca_ksa.zatca_ksa.validations.before_save",
+        "after_insert": "zatca_ksa.zatca_ksa.validations.duplicating_invoice",
+        "on_submit": "zatca_ksa.zatca_ksa.sign_invoice.zatca_Background_on_submit"
+    }
+}
+doctype_js = {
+    "Sales Invoice" : "public/js/our_sales_invoice.js" ,
+    }
+
+
+fixtures = [ {"dt": "Custom Field","filters": [["module", "=", "Zatca KSA"]] }]
diff --git a/zatca_ksa/modules.txt b/zatca_ksa/modules.txt
new file mode 100644
index 0000000..6f76443
--- /dev/null
+++ b/zatca_ksa/modules.txt
@@ -0,0 +1 @@
+Zatca KSA
\ No newline at end of file
diff --git a/zatca_ksa/patches.txt b/zatca_ksa/patches.txt
new file mode 100644
index 0000000..f15c3a9
--- /dev/null
+++ b/zatca_ksa/patches.txt
@@ -0,0 +1,6 @@
+[pre_model_sync]
+# Patches added in this section will be executed before doctypes are migrated
+# Read docs to understand patches: https://frappeframework.com/docs/v14/user/en/database-migrations
+
+[post_model_sync]
+# Patches added in this section will be executed after doctypes are migrated
\ No newline at end of file
diff --git a/zatca_ksa/public/.gitkeep b/zatca_ksa/public/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/public/js/our_sales_invoice.js b/zatca_ksa/public/js/our_sales_invoice.js
new file mode 100644
index 0000000..f99ef8d
--- /dev/null
+++ b/zatca_ksa/public/js/our_sales_invoice.js
@@ -0,0 +1,46 @@
+
+frappe.ui.form.on("Sales Invoice", {
+    refresh: function(frm) {
+        if (frm.doc.docstatus === 1 && !["CLEARED", "REPORTED"].includes(frm.doc.custom_zatca_status)) {
+                frm.add_custom_button(__("Send invoice to Zatca"), function() {
+                    frm.call({
+                        method:"zatca_ksa.zatca_ksa.sign_invoice.zatca_Background",
+                        args: {
+                            "invoice_number": frm.doc.name
+                        },
+                        callback: function(response) {
+                            if (response.message) {  
+                                frappe.msgprint(response.message);
+                                frm.reload_doc();
+        
+                            }
+                            frm.reload_doc();
+                        }
+                        
+                    
+                    });
+                    frm.reload_doc();
+                }, __("Zatca Phase-2"));
+        }   
+
+        // frm.add_custom_button(__("Check invoice Validity"), function() {
+        //     frm.call({
+        //         method:"zatca2024.zatca2024.validation_inside_invoice.zatca_Call_compliance_inside",
+        //         args: {
+        //             "invoice_number": frm.doc.name
+        //         },
+        //         callback: function(response) {
+        //             if (response.message) {  
+        //                 frappe.msgprint(response.message);
+        //                 frm.reload_doc();
+  
+        //             }
+        //             frm.reload_doc();
+        //         }
+                
+            
+        //     });
+        //     frm.reload_doc();
+        // }, __("Zatca Phase-2"));
+    }
+});
diff --git a/zatca_ksa/templates/__init__.py b/zatca_ksa/templates/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/templates/pages/__init__.py b/zatca_ksa/templates/pages/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/www/__init__.py b/zatca_ksa/www/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/zatca_ksa/__init__.py b/zatca_ksa/zatca_ksa/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/zatca_ksa/createxml.py b/zatca_ksa/zatca_ksa/createxml.py
new file mode 100644
index 0000000..6e77e26
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/createxml.py
@@ -0,0 +1,822 @@
+#utilites for zatca2024
+
+import frappe
+import os
+# frappe.init(site="prod.ksa.com")
+# frappe.connect()
+import xml.etree.ElementTree as ET
+from lxml import etree
+import xml.dom.minidom as minidom
+import uuid 
+from frappe.utils import now
+import re
+from lxml import etree
+from frappe.utils.data import  get_time
+from datetime import datetime, timezone
+import xml.etree.ElementTree as ET
+import json
+import xml.etree.ElementTree as ElementTree
+
+def get_Tax_for_Item(full_string,item):
+            try:                                          # getting tax percentage and tax amount
+                data = json.loads(full_string)
+                tax_percentage=data.get(item,[0,0])[0]
+                tax_amount = data.get(item, [0, 0])[1]
+                return tax_amount,tax_percentage
+            except Exception as e:
+                    frappe.throw("error occured in tax for item"+ str(e) )
+
+def get_ICV_code(invoice_number):
+                try:
+                    icv_code =  re.sub(r'\D', '', invoice_number)   # taking the number part only from doc name
+                    return icv_code
+                except Exception as e:
+                    frappe.throw("error in getting icv number:  "+ str(e) )
+                    
+def  get_Issue_Time(invoice_number): 
+                doc = frappe.get_doc("Sales Invoice", invoice_number)
+                time = get_time(doc.posting_time)
+                issue_time = time.strftime("%H:%M:%S")  #time in format of  hour,mints,secnds
+                # utc_now = datetime.utcnow().replace(tzinfo=timezone.utc)
+                # issue_time = utc_now.strftime('%H:%M:%SZ') 
+                return issue_time
+  
+def xml_tags():
+            try: 
+                invoice = ET.Element("Invoice", xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" )
+                invoice.set("xmlns:cac", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2")
+                invoice.set("xmlns:cbc", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2")
+                invoice.set("xmlns:ext", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2")   
+                ubl_extensions = ET.SubElement(invoice, "ext:UBLExtensions")
+                ubl_extension = ET.SubElement(ubl_extensions, "ext:UBLExtension")
+                extension_uri = ET.SubElement(ubl_extension, "ext:ExtensionURI")
+                extension_uri.text = "urn:oasis:names:specification:ubl:dsig:enveloped:xades"
+                extension_content = ET.SubElement(ubl_extension, "ext:ExtensionContent")
+                UBL_Document_Signatures = ET.SubElement(extension_content , "sig:UBLDocumentSignatures"    )
+                UBL_Document_Signatures.set("xmlns:sig" , "urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2")
+                UBL_Document_Signatures.set("xmlns:sac" , "urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2")
+                UBL_Document_Signatures.set("xmlns:sbc" , "urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2")
+                Signature_Information = ET.SubElement(UBL_Document_Signatures , "sac:SignatureInformation"  )
+                id = ET.SubElement(Signature_Information , "cbc:ID"  )
+                id.text = "urn:oasis:names:specification:ubl:signature:1"
+                Referenced_SignatureID = ET.SubElement(Signature_Information , "sbc:ReferencedSignatureID"  )
+                Referenced_SignatureID.text = "urn:oasis:names:specification:ubl:signature:Invoice"
+                Signature = ET.SubElement(Signature_Information , "ds:Signature"  )
+                Signature.set("Id" , "signature" )
+                Signature.set("xmlns:ds" , "http://www.w3.org/2000/09/xmldsig#" )
+                Signed_Info = ET.SubElement(Signature , "ds:SignedInfo"  )
+                Canonicalization_Method = ET.SubElement(Signed_Info , "ds:CanonicalizationMethod"  )
+                Canonicalization_Method.set("Algorithm" , "http://www.w3.org/2006/12/xml-c14n11"  )
+                Signature_Method = ET.SubElement(Signed_Info , "ds:SignatureMethod"  )
+                Signature_Method.set("Algorithm" , "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"  )
+                Reference = ET.SubElement(Signed_Info , "ds:Reference"  )
+                Reference.set("Id"  , "invoiceSignedData")
+                Reference.set("URI"  , "")
+                Transforms = ET.SubElement(Reference , "ds:Transforms" )
+                Transform = ET.SubElement(Transforms , "ds:Transform" )
+                Transform.set("Algorithm" , "http://www.w3.org/TR/1999/REC-xpath-19991116")
+                XPath = ET.SubElement(Transform , "ds:XPath" )
+                XPath.text = "not(//ancestor-or-self::ext:UBLExtensions)"
+                Transform2 = ET.SubElement(Transforms , "ds:Transform" )
+                Transform2.set("Algorithm" , "http://www.w3.org/TR/1999/REC-xpath-19991116")
+                XPath2 = ET.SubElement(Transform2 , "ds:XPath" )
+                XPath2.text = "not(//ancestor-or-self::cac:Signature)"
+                Transform3 = ET.SubElement(Transforms , "ds:Transform" )
+                Transform3.set("Algorithm" , "http://www.w3.org/TR/1999/REC-xpath-19991116")
+                XPath3 = ET.SubElement(Transform3 , "ds:XPath" )
+                XPath3.text = "not(//ancestor-or-self::cac:AdditionalDocumentReference[cbc:ID='QR'])"
+                Transform4 = ET.SubElement(Transforms , "ds:Transform" )
+                Transform4.set("Algorithm" , "http://www.w3.org/2006/12/xml-c14n11")
+                Diges_Method = ET.SubElement(Reference , "ds:DigestMethod" )
+                Diges_Method.set("Algorithm" , "http://www.w3.org/2001/04/xmlenc#sha256")
+                Diges_value = ET.SubElement(Reference , "ds:DigestValue" )
+                Diges_value.text = "O/vEnAxjLAlw8kQUy8nq/5n8IEZ0YeIyBFvdQA8+iFM="
+                Reference2 = ET.SubElement(Signed_Info , "ds:Reference"  )
+                Reference2.set("URI" , "#xadesSignedProperties")
+                Reference2.set("Type" , "http://www.w3.org/2000/09/xmldsig#SignatureProperties")
+                Digest_Method1 = ET.SubElement(Reference2 , "ds:DigestMethod"  )
+                Digest_Method1.set("Algorithm" , "http://www.w3.org/2001/04/xmlenc#sha256")
+                Digest_value1 = ET.SubElement(Reference2 , "ds:DigestValue"  )
+                Digest_value1.text="YjQwZmEyMjM2NDU1YjQwNjM5MTFmYmVkODc4NjM2NTc0N2E3OGFmZjVlMzA1ODAwYWE5Y2ZmYmFjZjRiNjQxNg=="
+                Signature_Value = ET.SubElement(Signature , "ds:SignatureValue"  )
+                Signature_Value.text = "MEQCIDGBRHiPo6yhXIQ9df6pMEkufcGnoqYaS+O8Jn0xagBiAiBtoxpbrwfEJHhUGQHTqzD1ORX5+Z/tumM0wLfZ4cuYRg=="
+                KeyInfo = ET.SubElement(Signature , "ds:KeyInfo"  )
+                X509Data = ET.SubElement(KeyInfo , "ds:X509Data"  )
+                X509Certificate = ET.SubElement(X509Data , "ds:X509Certificate"  )
+                X509Certificate.text = "MIID6TCCA5CgAwIBAgITbwAAf8tem6jngr16DwABAAB/yzAKBggqhkjOPQQDAjBjMRUwEwYKCZImiZPyLGQBGRYFbG9jYWwxEzARBgoJkiaJk/IsZAEZFgNnb3YxFzAVBgoJkiaJk/IsZAEZFgdleHRnYXp0MRwwGgYDVQQDExNUU1pFSU5WT0lDRS1TdWJDQS0xMB4XDTIyMDkxNDEzMjYwNFoXDTI0MDkxMzEzMjYwNFowTjELMAkGA1UEBhMCU0ExEzARBgNVBAoTCjMxMTExMTExMTExDDAKBgNVBAsTA1RTVDEcMBoGA1UEAxMTVFNULTMxMTExMTExMTEwMTExMzBWMBAGByqGSM49AgEGBSuBBAAKA0IABGGDDKDmhWAITDv7LXqLX2cmr6+qddUkpcLCvWs5rC2O29W/hS4ajAK4Qdnahym6MaijX75Cg3j4aao7ouYXJ9GjggI5MIICNTCBmgYDVR0RBIGSMIGPpIGMMIGJMTswOQYDVQQEDDIxLVRTVHwyLVRTVHwzLWE4NjZiMTQyLWFjOWMtNDI0MS1iZjhlLTdmNzg3YTI2MmNlMjEfMB0GCgmSJomT8ixkAQEMDzMxMTExMTExMTEwMTExMzENMAsGA1UEDAwEMTEwMDEMMAoGA1UEGgwDVFNUMQwwCgYDVQQPDANUU1QwHQYDVR0OBBYEFDuWYlOzWpFN3no1WtyNktQdrA8JMB8GA1UdIwQYMBaAFHZgjPsGoKxnVzWdz5qspyuZNbUvME4GA1UdHwRHMEUwQ6BBoD+GPWh0dHA6Ly90c3RjcmwuemF0Y2EuZ292LnNhL0NlcnRFbnJvbGwvVFNaRUlOVk9JQ0UtU3ViQ0EtMS5jcmwwga0GCCsGAQUFBwEBBIGgMIGdMG4GCCsGAQUFBzABhmJodHRwOi8vdHN0Y3JsLnphdGNhLmdvdi5zYS9DZXJ0RW5yb2xsL1RTWkVpbnZvaWNlU0NBMS5leHRnYXp0Lmdvdi5sb2NhbF9UU1pFSU5WT0lDRS1TdWJDQS0xKDEpLmNydDArBggrBgEFBQcwAYYfaHR0cDovL3RzdGNybC56YXRjYS5nb3Yuc2Evb2NzcDAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMDMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwIwCgYIKwYBBQUHAwMwCgYIKoZIzj0EAwIDRwAwRAIgOgjNPJW017lsIijmVQVkP7GzFO2KQKd9GHaukLgIWFsCIFJF9uwKhTMxDjWbN+1awsnFI7RLBRxA/6hZ+F1wtaqU"
+                Object = ET.SubElement(Signature , "ds:Object"  )
+                QualifyingProperties = ET.SubElement(Object , "xades:QualifyingProperties"  )
+                QualifyingProperties.set("Target" , "signature")
+                QualifyingProperties.set("xmlns:xades" , "http://uri.etsi.org/01903/v1.3.2#")
+                SignedProperties = ET.SubElement(QualifyingProperties , "xades:SignedProperties"  )
+                SignedProperties.set("Id" , "xadesSignedProperties")
+                SignedSignatureProperties = ET.SubElement(SignedProperties , "xades:SignedSignatureProperties"  )
+                SigningTime = ET.SubElement(SignedSignatureProperties , "xades:SigningTime"  )
+                SigningTime.text = "2024-01-24T11:36:34Z"
+                SigningCertificate = ET.SubElement(SignedSignatureProperties , "xades:SigningCertificate"  )
+                Cert = ET.SubElement(SigningCertificate , "xades:Cert"  )
+                CertDigest = ET.SubElement(Cert , "xades:CertDigest"  )
+                Digest_Method2 = ET.SubElement(CertDigest , "ds:DigestMethod"  )
+                Digest_Value2 = ET.SubElement(CertDigest , "ds:DigestValue"  )
+                Digest_Method2.set("Algorithm" , "http://www.w3.org/2001/04/xmlenc#sha256")
+                Digest_Value2.text = "YTJkM2JhYTcwZTBhZTAxOGYwODMyNzY3NTdkZDM3YzhjY2IxOTIyZDZhM2RlZGJiMGY0NDUzZWJhYWI4MDhmYg=="
+                IssuerSerial = ET.SubElement(Cert , "xades:IssuerSerial"  )
+                X509IssuerName = ET.SubElement(IssuerSerial , "ds:X509IssuerName"  )
+                X509SerialNumber = ET.SubElement(IssuerSerial , "ds:X509SerialNumber"  )
+                X509IssuerName.text = "CN=TSZEINVOICE-SubCA-1, DC=extgazt, DC=gov, DC=local"
+                X509SerialNumber.text = "2475382886904809774818644480820936050208702411"
+                return invoice
+            except Exception as e:
+                    frappe.throw("error in xml tags formation:  "+ str(e) )
+
+def salesinvoice_data(invoice,invoice_number):
+            try:
+                sales_invoice_doc = frappe.get_doc('Sales Invoice' ,invoice_number)
+                cbc_ProfileID = ET.SubElement(invoice, "cbc:ProfileID")
+                cbc_ProfileID.text = "reporting:1.0"
+                cbc_ID = ET.SubElement(invoice, "cbc:ID")
+                cbc_ID.text = str(sales_invoice_doc.name)
+                cbc_UUID = ET.SubElement(invoice, "cbc:UUID")
+                cbc_UUID.text =  str(uuid.uuid1())
+                uuid1= cbc_UUID.text
+                cbc_IssueDate = ET.SubElement(invoice, "cbc:IssueDate")
+                cbc_IssueDate.text = str(sales_invoice_doc.posting_date)
+                cbc_IssueTime = ET.SubElement(invoice, "cbc:IssueTime")
+                cbc_IssueTime.text = get_Issue_Time(invoice_number)
+                return invoice ,uuid1 ,sales_invoice_doc
+            except Exception as e:
+                    frappe.throw("error occured in salesinvoice data"+ str(e) )
+
+def invoice_Typecode_Compliance(invoice,compliance_type):
+                    # 0 is default. Not for compliance test. But normal reporting or clearance call.
+                    # 1 is for compliance test. Simplified invoice
+                    # 2 is for compliance test. Standard invoice
+                    # 3 is for compliance test. Simplified Credit Note
+                    # 4 is for compliance test. Standard Credit Note
+                    # 5 is for compliance test. Simplified Debit Note
+                    # 6 is for compliance test. Standard Debit Note
+            # frappe.throw(str("here 5 " + str(compliance_type)))
+            try:                         
+                # cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                # cbc_InvoiceTypeCode.set("name", "0200000")
+                # cbc_InvoiceTypeCode.text = "388"
+                # return invoice
+                 
+                if compliance_type == "1":       # simplified invoice
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode") 
+                    cbc_InvoiceTypeCode.set("name", "0200000")
+                    cbc_InvoiceTypeCode.text = "388"
+                    
+                elif compliance_type == "2":       # standard invoice
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0100000")
+                    cbc_InvoiceTypeCode.text = "388"
+                  
+                elif compliance_type == "3":       # simplified Credit note
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0200000")
+                    cbc_InvoiceTypeCode.text = "381"
+                    
+                   
+                elif compliance_type == "4":       # Standard Credit note
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0100000")
+                    cbc_InvoiceTypeCode.text = "381"
+                   
+                elif compliance_type == "5":       # simplified Debit note
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0211000")
+                    cbc_InvoiceTypeCode.text = "383"
+                   
+                elif compliance_type == "6":       # Standard Debit note
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0100000")
+                    cbc_InvoiceTypeCode.text = "383"
+                return invoice
+                
+                
+                
+            except Exception as e:
+                    frappe.throw("error occured in Compliance typecode"+ str(e) )
+
+
+def invoice_Typecode_Simplified(invoice,sales_invoice_doc):
+            try:                             
+                cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                if sales_invoice_doc.is_return == 0:         
+                    cbc_InvoiceTypeCode.set("name", "0200000") # Simplified
+                    cbc_InvoiceTypeCode.text = "388"
+                elif sales_invoice_doc.is_return == 1:       # return items and simplified invoice
+                    cbc_InvoiceTypeCode.set("name", "0200000")  # Simplified
+                    cbc_InvoiceTypeCode.text = "381"  # Credit note
+                return invoice
+            except Exception as e:
+                    frappe.throw("error occured in simplified invoice typecode"+ str(e) )
+
+def invoice_Typecode_Standard(invoice,sales_invoice_doc):
+            try:
+                    cbc_InvoiceTypeCode = ET.SubElement(invoice, "cbc:InvoiceTypeCode")
+                    cbc_InvoiceTypeCode.set("name", "0100000") # Standard
+                    if sales_invoice_doc.is_return == 0:
+                        cbc_InvoiceTypeCode.text = "388"
+                    elif sales_invoice_doc.is_return == 1:     # return items and simplified invoice
+                        cbc_InvoiceTypeCode.text = "381" # Credit note
+                    return invoice
+            except Exception as e:
+                    frappe.throw("Error in standard invoice type code: "+ str(e))
+                    
+def doc_Reference(invoice,sales_invoice_doc,invoice_number):
+            try:
+                cbc_DocumentCurrencyCode = ET.SubElement(invoice, "cbc:DocumentCurrencyCode")
+                cbc_DocumentCurrencyCode.text = sales_invoice_doc.currency
+                cbc_TaxCurrencyCode = ET.SubElement(invoice, "cbc:TaxCurrencyCode")
+                cbc_TaxCurrencyCode.text = "SAR"  # SAR is as zatca requires tax amount in SAR
+                if sales_invoice_doc.is_return == 1:
+                                invoice=billing_reference_for_credit_and_debit_note(invoice,sales_invoice_doc)
+                cac_AdditionalDocumentReference = ET.SubElement(invoice, "cac:AdditionalDocumentReference")
+                cbc_ID_1 = ET.SubElement(cac_AdditionalDocumentReference, "cbc:ID")
+                cbc_ID_1.text = "ICV"
+                cbc_UUID_1 = ET.SubElement(cac_AdditionalDocumentReference, "cbc:UUID")
+                cbc_UUID_1.text = str(get_ICV_code(invoice_number))
+                return invoice  
+            except Exception as e:
+                    frappe.throw("Error occured in  reference doc" + str(e) )
+
+
+def doc_Reference_compliance(invoice,sales_invoice_doc,invoice_number, compliance_type):
+            try:
+                cbc_DocumentCurrencyCode = ET.SubElement(invoice, "cbc:DocumentCurrencyCode")
+                cbc_DocumentCurrencyCode.text = sales_invoice_doc.currency
+                cbc_TaxCurrencyCode = ET.SubElement(invoice, "cbc:TaxCurrencyCode")
+                cbc_TaxCurrencyCode.text = sales_invoice_doc.currency
+                
+                if compliance_type == "3" or compliance_type == "4" or compliance_type == "5" or compliance_type == "6":
+                
+                    cac_BillingReference = ET.SubElement(invoice, "cac:BillingReference")
+                    cac_InvoiceDocumentReference = ET.SubElement(cac_BillingReference, "cac:InvoiceDocumentReference")
+                    cbc_ID13 = ET.SubElement(cac_InvoiceDocumentReference, "cbc:ID")
+                    cbc_ID13.text = "6666666"  # field from return against invoice. 
+                
+                cac_AdditionalDocumentReference = ET.SubElement(invoice, "cac:AdditionalDocumentReference")
+                cbc_ID_1 = ET.SubElement(cac_AdditionalDocumentReference, "cbc:ID")
+                cbc_ID_1.text = "ICV"
+                cbc_UUID_1 = ET.SubElement(cac_AdditionalDocumentReference, "cbc:UUID")
+                cbc_UUID_1.text = str(get_ICV_code(invoice_number))
+                return invoice  
+            except Exception as e:
+                    frappe.throw("Error occured in  reference doc" + str(e) )
+
+def get_pih_for_company(pih_data, company_name):
+                
+                try:
+                    for entry in pih_data.get("data", []):
+                        if entry.get("company") == company_name:
+                            return entry.get("pih")
+                    frappe.throw("Error while retrieving  PIH of company for production:  " + str(e) )
+                except Exception as e:
+                        frappe.throw("Error in getting PIH of company for production:  " + str(e) )
+
+
+def additional_Reference(invoice):
+            try:
+                settings = frappe.get_doc('Zatca KSA Setting')
+                cac_AdditionalDocumentReference2 = ET.SubElement(invoice, "cac:AdditionalDocumentReference")
+                cbc_ID_1_1 = ET.SubElement(cac_AdditionalDocumentReference2, "cbc:ID")
+                cbc_ID_1_1.text = "PIH"
+                cac_Attachment = ET.SubElement(cac_AdditionalDocumentReference2, "cac:Attachment")
+                cbc_EmbeddedDocumentBinaryObject = ET.SubElement(cac_Attachment, "cbc:EmbeddedDocumentBinaryObject")
+                cbc_EmbeddedDocumentBinaryObject.set("mimeCode", "text/plain")
+                
+                
+                company = settings.company
+                company_name = frappe.db.get_value("Company", company, "abbr")
+                pih_data_raw = settings.get("pih", "{}")
+                pih_data = json.loads(pih_data_raw)
+                pih = get_pih_for_company(pih_data, company_name)
+                
+                cbc_EmbeddedDocumentBinaryObject.text = pih
+                # cbc_EmbeddedDocumentBinaryObject.text = "L0Awl814W4ycuFvjDVL/vIW08mNRNAwqfdlF5i/3dpU="
+            # QR CODE ------------------------------------------------------------------------------------------------------------------------------------------------------------------
+                cac_AdditionalDocumentReference22 = ET.SubElement(invoice, "cac:AdditionalDocumentReference")
+                cbc_ID_1_12 = ET.SubElement(cac_AdditionalDocumentReference22, "cbc:ID")
+                cbc_ID_1_12.text = "QR"
+                cac_Attachment22 = ET.SubElement(cac_AdditionalDocumentReference22, "cac:Attachment")
+                cbc_EmbeddedDocumentBinaryObject22 = ET.SubElement(cac_Attachment22, "cbc:EmbeddedDocumentBinaryObject")
+                cbc_EmbeddedDocumentBinaryObject22.set("mimeCode", "text/plain")
+                cbc_EmbeddedDocumentBinaryObject22.text = "GsiuvGjvchjbFhibcDhjv1886G"
+            #END  QR CODE ------------------------------------------------------------------------------------------------------------------------------------------------------------------
+                cac_sign = ET.SubElement(invoice, "cac:Signature")
+                cbc_id_sign = ET.SubElement(cac_sign, "cbc:ID")
+                cbc_method_sign = ET.SubElement(cac_sign, "cbc:SignatureMethod")
+                cbc_id_sign.text = "urn:oasis:names:specification:ubl:signature:Invoice"
+                cbc_method_sign.text = "urn:oasis:names:specification:ubl:dsig:enveloped:xades"
+                return invoice
+            except Exception as e:
+                    frappe.throw("error occured in additional refrences" + str(e) )
+
+def company_Data(invoice,sales_invoice_doc):
+            try:
+                company_doc = frappe.get_doc("Company", sales_invoice_doc.company)
+                customer_doc= frappe.get_doc("Customer",sales_invoice_doc.customer)
+                cac_AccountingSupplierParty = ET.SubElement(invoice, "cac:AccountingSupplierParty")
+                cac_Party_1 = ET.SubElement(cac_AccountingSupplierParty, "cac:Party")
+                cac_PartyIdentification = ET.SubElement(cac_Party_1, "cac:PartyIdentification")
+                cbc_ID_2 = ET.SubElement(cac_PartyIdentification, "cbc:ID")
+                cbc_ID_2.set("schemeID", "CRN")
+                cbc_ID_2.text =company_doc.tax_id   # COmpany CR - Need to have a field in company doctype called company_registration 
+                address_list = frappe.get_list("Address", filters={"is_your_company_address": "1"}, fields=["address_line1", "address_line2","city","pincode","state"])
+                if len(address_list) == 0:
+                    frappe.throw("Zatca requires proper address. Please add your company address in address master")
+                for address in address_list:
+                    cac_PostalAddress = ET.SubElement(cac_Party_1, "cac:PostalAddress")
+                    cbc_StreetName = ET.SubElement(cac_PostalAddress, "cbc:StreetName")
+                    cbc_StreetName.text = address.address_line1
+                    cbc_BuildingNumber = ET.SubElement(cac_PostalAddress, "cbc:BuildingNumber")
+                    cbc_BuildingNumber.text = "6819"
+                    cbc_PlotIdentification = ET.SubElement(cac_PostalAddress, "cbc:PlotIdentification")
+                    cbc_PlotIdentification.text =  address.address_line1
+                    cbc_CitySubdivisionName = ET.SubElement(cac_PostalAddress, "cbc:CitySubdivisionName")
+                    cbc_CitySubdivisionName.text = address.address_line2
+                    cbc_CityName = ET.SubElement(cac_PostalAddress, "cbc:CityName")
+                    cbc_CityName.text = address.city
+                    cbc_PostalZone = ET.SubElement(cac_PostalAddress, "cbc:PostalZone")
+                    cbc_PostalZone.text = address.pincode
+                    cbc_CountrySubentity = ET.SubElement(cac_PostalAddress, "cbc:CountrySubentity")
+                    cbc_CountrySubentity.text = address.state
+                    break
+                cac_Country = ET.SubElement(cac_PostalAddress, "cac:Country")
+                cbc_IdentificationCode = ET.SubElement(cac_Country, "cbc:IdentificationCode")
+                cbc_IdentificationCode.text = "SA"
+                cac_PartyTaxScheme = ET.SubElement(cac_Party_1, "cac:PartyTaxScheme")
+                cbc_CompanyID = ET.SubElement(cac_PartyTaxScheme, "cbc:CompanyID")
+                cbc_CompanyID.text = company_doc.tax_id
+                cac_TaxScheme = ET.SubElement(cac_PartyTaxScheme, "cac:TaxScheme")
+                cbc_ID_3 = ET.SubElement(cac_TaxScheme, "cbc:ID")
+                cbc_ID_3.text = "VAT"
+                cac_PartyLegalEntity = ET.SubElement(cac_Party_1, "cac:PartyLegalEntity")
+                cbc_RegistrationName = ET.SubElement(cac_PartyLegalEntity, "cbc:RegistrationName")
+                cbc_RegistrationName.text = sales_invoice_doc.company
+                return invoice
+            except Exception as e:
+                    frappe.throw("error occured in company data"+ str(e) )
+
+def customer_Data(invoice,sales_invoice_doc):
+            try:
+                customer_doc= frappe.get_doc("Customer",sales_invoice_doc.customer)
+                cac_AccountingCustomerParty = ET.SubElement(invoice, "cac:AccountingCustomerParty")
+                cac_Party_2 = ET.SubElement(cac_AccountingCustomerParty, "cac:Party")
+                cac_PartyIdentification_1 = ET.SubElement(cac_Party_2, "cac:PartyIdentification")
+                cbc_ID_4 = ET.SubElement(cac_PartyIdentification_1, "cbc:ID")
+                cbc_ID_4.set("schemeID", "CRN")
+                cbc_ID_4.text =customer_doc.tax_id
+                if int(frappe.__version__.split('.')[0]) == 13:
+                    address = frappe.get_doc("Address", sales_invoice_doc.customer_address)    
+                else:
+                    address = frappe.get_doc("Address", customer_doc.customer_primary_address)
+                cac_PostalAddress_1 = ET.SubElement(cac_Party_2, "cac:PostalAddress")
+                cbc_StreetName_1 = ET.SubElement(cac_PostalAddress_1, "cbc:StreetName")
+                cbc_StreetName_1.text = address.address_line1
+                cbc_BuildingNumber_1 = ET.SubElement(cac_PostalAddress_1, "cbc:BuildingNumber")
+                cbc_BuildingNumber_1.text = address.address_line2
+                cbc_PlotIdentification_1 = ET.SubElement(cac_PostalAddress_1, "cbc:PlotIdentification")
+                if hasattr(address, 'po_box'):
+                    cbc_PlotIdentification_1.text = address.po_box
+                else:
+                    cbc_PlotIdentification_1.text = address.address_line1
+                cbc_CitySubdivisionName_1 = ET.SubElement(cac_PostalAddress_1, "cbc:CitySubdivisionName")
+                cbc_CitySubdivisionName_1.text = address.address_line2
+                cbc_CityName_1 = ET.SubElement(cac_PostalAddress_1, "cbc:CityName")
+                cbc_CityName_1.text = address.city
+                cbc_PostalZone_1 = ET.SubElement(cac_PostalAddress_1, "cbc:PostalZone")
+                cbc_PostalZone_1.text =address.pincode
+                cbc_CountrySubentity_1 = ET.SubElement(cac_PostalAddress_1, "cbc:CountrySubentity")
+                cbc_CountrySubentity_1.text =address.state
+                cac_Country_1 = ET.SubElement(cac_PostalAddress_1, "cac:Country")
+                cbc_IdentificationCode_1 = ET.SubElement(cac_Country_1, "cbc:IdentificationCode")
+                cbc_IdentificationCode_1.text = "SA" 
+                cac_PartyTaxScheme_1 = ET.SubElement(cac_Party_2, "cac:PartyTaxScheme")
+                cac_TaxScheme_1 = ET.SubElement(cac_PartyTaxScheme_1, "cac:TaxScheme")
+                cbc_ID_5 = ET.SubElement(cac_TaxScheme_1, "cbc:ID")
+                cbc_ID_5.text = "VAT"
+                cac_PartyLegalEntity_1 = ET.SubElement(cac_Party_2, "cac:PartyLegalEntity")
+                cbc_RegistrationName_1 = ET.SubElement(cac_PartyLegalEntity_1, "cbc:RegistrationName")
+                cbc_RegistrationName_1.text = sales_invoice_doc.customer
+                return invoice
+            except Exception as e:
+                    frappe.throw("error occured in customer data"+ str(e) )
+
+def delivery_And_PaymentMeans(invoice,sales_invoice_doc, is_return):
+            try:
+                cac_Delivery = ET.SubElement(invoice, "cac:Delivery")
+                cbc_ActualDeliveryDate = ET.SubElement(cac_Delivery, "cbc:ActualDeliveryDate")
+                cbc_ActualDeliveryDate.text = str(sales_invoice_doc.due_date)
+                cac_PaymentMeans = ET.SubElement(invoice, "cac:PaymentMeans")
+                cbc_PaymentMeansCode = ET.SubElement(cac_PaymentMeans, "cbc:PaymentMeansCode")
+                cbc_PaymentMeansCode.text = "30"
+                
+                if is_return == 1:
+                    cbc_InstructionNote = ET.SubElement(cac_PaymentMeans, "cbc:InstructionNote")
+                    cbc_InstructionNote.text = "Cancellation"    
+                return invoice
+            except Exception as e:
+                    frappe.throw("Delivery and payment means failed"+ str(e) )
+def delivery_And_PaymentMeans_for_Compliance(invoice,sales_invoice_doc, compliance_type):
+            try:
+                cac_Delivery = ET.SubElement(invoice, "cac:Delivery")
+                cbc_ActualDeliveryDate = ET.SubElement(cac_Delivery, "cbc:ActualDeliveryDate")
+                cbc_ActualDeliveryDate.text = str(sales_invoice_doc.due_date)
+                cac_PaymentMeans = ET.SubElement(invoice, "cac:PaymentMeans")
+                cbc_PaymentMeansCode = ET.SubElement(cac_PaymentMeans, "cbc:PaymentMeansCode")
+                cbc_PaymentMeansCode.text = "30"
+                
+                if compliance_type == "3" or compliance_type == "4" or compliance_type == "5" or compliance_type == "6":
+                    cbc_InstructionNote = ET.SubElement(cac_PaymentMeans, "cbc:InstructionNote")
+                    cbc_InstructionNote.text = "Cancellation"    
+                return invoice
+            except Exception as e:
+                    frappe.throw("Delivery and payment means failed"+ str(e) )
+                                        
+def billing_reference_for_credit_and_debit_note(invoice,sales_invoice_doc):
+            try:
+                #details of original invoice
+                cac_BillingReference = ET.SubElement(invoice, "cac:BillingReference")
+                cac_InvoiceDocumentReference = ET.SubElement(cac_BillingReference, "cac:InvoiceDocumentReference")
+                cbc_ID13 = ET.SubElement(cac_InvoiceDocumentReference, "cbc:ID")
+                cbc_ID13.text = sales_invoice_doc.return_against  # field from return against invoice. 
+                
+                return invoice
+            except Exception as e:
+                    frappe.throw("credit and debit note billing failed"+ str(e) )
+
+def get_exemption_reason_map():
+    return {
+        "VATEX-SA-29": "Financial services mentioned in Article 29 of the VAT Regulations.",
+        "VATEX-SA-29-7": "Life insurance services mentioned in Article 29 of the VAT Regulations.",
+        "VATEX-SA-30": "Real estate transactions mentioned in Article 30 of the VAT Regulations.",
+        "VATEX-SA-32": "Export of goods.",
+        "VATEX-SA-33": "Export of services.",
+        "VATEX-SA-34-1": "The international transport of Goods.",
+        "VATEX-SA-34-2": "International transport of passengers.",
+        "VATEX-SA-34-3": "Services directly connected and incidental to a Supply of international passenger transport.",
+        "VATEX-SA-34-4": "Supply of a qualifying means of transport.",
+        "VATEX-SA-34-5": "Any services relating to Goods or passenger transportation, as defined in article twenty five of these Regulations.",
+        "VATEX-SA-35": "Medicines and medical equipment.",
+        "VATEX-SA-36": "Qualifying metals.",
+        "VATEX-SA-EDU": "Private education to citizen.",
+        "VATEX-SA-HEA ": "Private healthcare to citizen.",
+        "VATEX-SA-MLTRY": "Supply of qualified military goods",
+        "VATEX-SA-OOS": "The reason is a free text, has to be provided by the taxpayer on case to case basis."
+    
+    }
+
+
+def tax_Data(invoice,sales_invoice_doc):
+            try:
+
+                #for foreign currency
+                if sales_invoice_doc.currency != "SAR":
+                    cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                    cbc_TaxAmount_SAR = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                    cbc_TaxAmount_SAR.set("currencyID", "SAR") # SAR is as zatca requires tax amount in SAR
+                    tax_amount_without_retention_sar =  round(sales_invoice_doc.conversion_rate * abs(get_tax_total_from_items(sales_invoice_doc)),2)
+                    cbc_TaxAmount_SAR.text = str(round( tax_amount_without_retention_sar,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                #end for foreign currency
+                
+                
+                #for SAR currency
+                if sales_invoice_doc.currency == "SAR":
+                    cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                    cbc_TaxAmount_SAR = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                    cbc_TaxAmount_SAR.set("currencyID", "SAR") # SAR is as zatca requires tax amount in SAR
+                    tax_amount_without_retention_sar =  round(abs(get_tax_total_from_items(sales_invoice_doc)),2)
+                    cbc_TaxAmount_SAR.text = str(round( tax_amount_without_retention_sar,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                #end for SAR currency
+                
+                
+        
+                cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                cbc_TaxAmount = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                cbc_TaxAmount.set("currencyID", sales_invoice_doc.currency) # SAR is as zatca requires tax amount in SAR
+                tax_amount_without_retention =  round(abs(get_tax_total_from_items(sales_invoice_doc)),2)
+                cbc_TaxAmount.text = str(round( tax_amount_without_retention,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                cac_TaxSubtotal = ET.SubElement(cac_TaxTotal, "cac:TaxSubtotal")
+                cbc_TaxableAmount = ET.SubElement(cac_TaxSubtotal, "cbc:TaxableAmount")
+                cbc_TaxableAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_TaxableAmount.text =str(abs(round(sales_invoice_doc.base_net_total,2)))
+                cbc_TaxAmount_2 = ET.SubElement(cac_TaxSubtotal, "cbc:TaxAmount")
+                cbc_TaxAmount_2.set("currencyID", sales_invoice_doc.currency)
+                
+                cbc_TaxAmount_2.text = str(tax_amount_without_retention) # str(abs(sales_invoice_doc.base_total_taxes_and_charges))
+                cac_TaxCategory_1 = ET.SubElement(cac_TaxSubtotal, "cac:TaxCategory")
+                cbc_ID_8 = ET.SubElement(cac_TaxCategory_1, "cbc:ID")
+                if sales_invoice_doc.custom_zatca_tax_category == "Standard":
+                    cbc_ID_8.text = "S"
+                elif sales_invoice_doc.custom_zatca_tax_category == "Zero Rated":
+                    cbc_ID_8.text = "Z"
+                elif sales_invoice_doc.custom_zatca_tax_category == "Exempted":
+                    cbc_ID_8.text = "E"
+                elif sales_invoice_doc.custom_zatca_tax_category == "Services outside scope of tax / Not subject to VAT":
+                    cbc_ID_8.text = "O"
+                cbc_Percent_1 = ET.SubElement(cac_TaxCategory_1, "cbc:Percent")
+                # cbc_Percent_1.text = str(sales_invoice_doc.taxes[0].rate)
+                cbc_Percent_1.text = f"{float(sales_invoice_doc.taxes[0].rate):.2f}" 
+                exemption_reason_map = get_exemption_reason_map()
+                if sales_invoice_doc.custom_zatca_tax_category != "Standard":
+                    cbc_TaxExemptionReasonCode = ET.SubElement(cac_TaxCategory_1, "cbc:TaxExemptionReasonCode")
+                    cbc_TaxExemptionReasonCode.text = sales_invoice_doc.custom_exemption_reason_code
+                    cbc_TaxExemptionReason = ET.SubElement(cac_TaxCategory_1, "cbc:TaxExemptionReason")
+                    reason_code = sales_invoice_doc.custom_exemption_reason_code
+                    if reason_code in exemption_reason_map:
+                        cbc_TaxExemptionReason.text = exemption_reason_map[reason_code]       
+                cac_TaxScheme_3 = ET.SubElement(cac_TaxCategory_1, "cac:TaxScheme")
+                cbc_ID_9 = ET.SubElement(cac_TaxScheme_3, "cbc:ID")
+                cbc_ID_9.text = "VAT"
+                
+                # cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                # cbc_TaxAmount = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                # cbc_TaxAmount.set("currencyID", sales_invoice_doc.currency)
+                # cbc_TaxAmount.text =str(round(tax_amount_without_retention,2))
+                
+                cac_LegalMonetaryTotal = ET.SubElement(invoice, "cac:LegalMonetaryTotal")
+                cbc_LineExtensionAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:LineExtensionAmount")
+                cbc_LineExtensionAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_LineExtensionAmount.text =  str(abs(sales_invoice_doc.base_net_total))
+                cbc_TaxExclusiveAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:TaxExclusiveAmount")
+                cbc_TaxExclusiveAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_TaxExclusiveAmount.text = str(abs(sales_invoice_doc.net_total))
+                cbc_TaxInclusiveAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:TaxInclusiveAmount")
+                cbc_TaxInclusiveAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_TaxInclusiveAmount.text = str(round(abs(sales_invoice_doc.net_total) + abs(tax_amount_without_retention),2))
+                cbc_AllowanceTotalAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:AllowanceTotalAmount")
+                cbc_AllowanceTotalAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_AllowanceTotalAmount.text = str(sales_invoice_doc.base_change_amount)
+                cbc_PayableAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:PayableAmount")
+                cbc_PayableAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_PayableAmount.text = str(round(abs(sales_invoice_doc.net_total) + abs(tax_amount_without_retention),2))
+                return invoice
+             
+            except Exception as e:
+                        frappe.throw("error occured in tax data"+ str(e) )
+
+def tax_Data_with_template(invoice,sales_invoice_doc):
+       
+            try:
+             
+                total_tax = sum(single_item.net_amount * (frappe.get_doc('Item Tax Template', single_item.item_tax_template).taxes[0].tax_rate / 100)
+                    for single_item in sales_invoice_doc.items)
+                #for foreign currency
+                if sales_invoice_doc.currency != "SAR":
+                    cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                    cbc_TaxAmount_SAR = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                    cbc_TaxAmount_SAR.set("currencyID", "SAR") # SAR is as zatca requires tax amount in SAR
+                    tax_amount_without_retention_sar =  round(sales_invoice_doc.conversion_rate * abs(total_tax),2)
+                    cbc_TaxAmount_SAR.text = str(round( tax_amount_without_retention_sar,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                #end for foreign currency
+                
+                
+                #for SAR currency   
+                if sales_invoice_doc.currency == "SAR":
+                    cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                    cbc_TaxAmount_SAR = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                    cbc_TaxAmount_SAR.set("currencyID", "SAR") # SAR is as zatca requires tax amount in SAR
+                    tax_amount_without_retention_sar =  round(abs(total_tax),2)
+                    cbc_TaxAmount_SAR.text = str(round( tax_amount_without_retention_sar,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                #end for SAR currency
+                
+                
+        
+                cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                cbc_TaxAmount = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                cbc_TaxAmount.set("currencyID", sales_invoice_doc.currency) # SAR is as zatca requires tax amount in SAR
+                tax_amount_without_retention =  round(abs(total_tax),2)
+                cbc_TaxAmount.text = str(round( tax_amount_without_retention,2))     # str( abs(sales_invoice_doc.base_total_taxes_and_charges))
+                processed_tax_templates = set()
+
+                for item in sales_invoice_doc.items:
+                    item_tax_template = frappe.get_doc('Item Tax Template', item.item_tax_template)
+                    if item.item_tax_template in processed_tax_templates:
+                        continue
+                    processed_tax_templates.add(item.item_tax_template)
+
+                    zatca_tax_category = item_tax_template.custom_zatca_tax_category
+                    exemption_reason_code = item_tax_template.custom_exemption_reason_code
+                    
+                    for tax in item_tax_template.taxes:
+                        item_tax_percentage = item_tax_template.taxes[0].tax_rate if item_tax_template.taxes else 15
+
+                        cac_TaxSubtotal = ET.SubElement(cac_TaxTotal, "cac:TaxSubtotal")
+                        cbc_TaxableAmount = ET.SubElement(cac_TaxSubtotal, "cbc:TaxableAmount")
+                        cbc_TaxableAmount.set("currencyID", sales_invoice_doc.currency)
+                        cbc_TaxableAmount.text = str(abs(item.base_net_amount))
+                        cbc_TaxAmount_2 = ET.SubElement(cac_TaxSubtotal, "cbc:TaxAmount")
+                        cbc_TaxAmount_2.set("currencyID", sales_invoice_doc.currency)
+                        cbc_TaxAmount_2.text =str(abs(round(item_tax_percentage * item.base_net_amount / 100,2)))
+
+                        cac_TaxCategory_1 = ET.SubElement(cac_TaxSubtotal, "cac:TaxCategory")
+                        cbc_ID_8 = ET.SubElement(cac_TaxCategory_1, "cbc:ID")
+
+                        if zatca_tax_category == "Standard":
+                            cbc_ID_8.text = "S"
+                        elif zatca_tax_category == "Zero Rated":
+                            cbc_ID_8.text = "Z"
+                        elif zatca_tax_category == "Exempted":
+                            cbc_ID_8.text = "E"
+                        elif zatca_tax_category == "Services outside scope of tax / Not subject to VAT":
+                            cbc_ID_8.text = "O"
+
+                        cbc_Percent_1 = ET.SubElement(cac_TaxCategory_1, "cbc:Percent")
+                        cbc_Percent_1.text = f"{float(tax.tax_rate):.2f}"
+
+                        exemption_reason_map = get_exemption_reason_map()
+
+                        if zatca_tax_category != "Standard":
+                            cbc_TaxExemptionReasonCode = ET.SubElement(cac_TaxCategory_1, "cbc:TaxExemptionReasonCode")
+                            cbc_TaxExemptionReasonCode.text = exemption_reason_code
+                            cbc_TaxExemptionReason = ET.SubElement(cac_TaxCategory_1, "cbc:TaxExemptionReason")
+
+                            if exemption_reason_code in exemption_reason_map:
+                                cbc_TaxExemptionReason.text = exemption_reason_map[exemption_reason_code]
+
+                        cac_TaxScheme = ET.SubElement(cac_TaxCategory_1, "cac:TaxScheme")
+                        cbc_TaxScheme_ID = ET.SubElement(cac_TaxScheme, "cbc:ID")
+                        cbc_TaxScheme_ID.text = "VAT"
+
+
+                # cac_TaxTotal = ET.SubElement(invoice, "cac:TaxTotal")
+                # cbc_TaxAmount = ET.SubElement(cac_TaxTotal, "cbc:TaxAmount")
+                # cbc_TaxAmount.set("currencyID", sales_invoice_doc.currency)
+                # cbc_TaxAmount.text =str(round(tax_amount_without_retention,2))
+                
+                cac_LegalMonetaryTotal = ET.SubElement(invoice, "cac:LegalMonetaryTotal")
+                cbc_LineExtensionAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:LineExtensionAmount")
+                cbc_LineExtensionAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_LineExtensionAmount.text =  str(abs(sales_invoice_doc.base_net_total))
+                cbc_TaxExclusiveAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:TaxExclusiveAmount")
+                cbc_TaxExclusiveAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_TaxExclusiveAmount.text = str(abs(sales_invoice_doc.net_total))
+                cbc_TaxInclusiveAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:TaxInclusiveAmount")
+                cbc_TaxInclusiveAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_TaxInclusiveAmount.text = str(round(abs(sales_invoice_doc.net_total) + abs(tax_amount_without_retention),2))
+                cbc_AllowanceTotalAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:AllowanceTotalAmount")
+                cbc_AllowanceTotalAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_AllowanceTotalAmount.text = str(sales_invoice_doc.base_change_amount)
+                cbc_PayableAmount = ET.SubElement(cac_LegalMonetaryTotal, "cbc:PayableAmount")
+                cbc_PayableAmount.set("currencyID", sales_invoice_doc.currency)
+                cbc_PayableAmount.text = str(round(abs(sales_invoice_doc.net_total) + abs(tax_amount_without_retention),2))
+                return invoice
+             
+            except Exception as e:
+                    frappe.throw("error occured in tax data"+ str(e) )
+                    
+def get_tax_total_from_items(sales_invoice_doc):
+            try:
+                total_tax = 0
+                for single_item in sales_invoice_doc.items : 
+                    item_tax_amount,tax_percent =  get_Tax_for_Item(sales_invoice_doc.taxes[0].item_wise_tax_detail,single_item.item_code)
+                    total_tax = total_tax + (single_item.net_amount * (tax_percent/100))
+                return total_tax 
+            except Exception as e:
+                    frappe.throw("Error occured in get_tax_total_from_items "+ str(e) )
+
+def item_data(invoice,sales_invoice_doc):
+            try:
+                for single_item in sales_invoice_doc.items : 
+                    item_tax_amount,item_tax_percentage =  get_Tax_for_Item(sales_invoice_doc.taxes[0].item_wise_tax_detail,single_item.item_code)
+                    cac_InvoiceLine = ET.SubElement(invoice, "cac:InvoiceLine")
+                    cbc_ID_10 = ET.SubElement(cac_InvoiceLine, "cbc:ID")
+                    cbc_ID_10.text = str(single_item.idx)
+                    cbc_InvoicedQuantity = ET.SubElement(cac_InvoiceLine, "cbc:InvoicedQuantity")
+                    cbc_InvoicedQuantity.set("unitCode", str(single_item.uom))
+                    cbc_InvoicedQuantity.text = str(abs(single_item.qty))
+                    cbc_LineExtensionAmount_1 = ET.SubElement(cac_InvoiceLine, "cbc:LineExtensionAmount")
+                    cbc_LineExtensionAmount_1.set("currencyID", sales_invoice_doc.currency)
+                    cbc_LineExtensionAmount_1.text=  str(abs(single_item.base_net_amount))
+                    cac_TaxTotal_2 = ET.SubElement(cac_InvoiceLine, "cac:TaxTotal")
+                    cbc_TaxAmount_3 = ET.SubElement(cac_TaxTotal_2, "cbc:TaxAmount")
+                    cbc_TaxAmount_3.set("currencyID", sales_invoice_doc.currency)
+                    cbc_TaxAmount_3.text = str(abs(round(item_tax_percentage * single_item.base_net_amount / 100,2)))
+                    cbc_RoundingAmount = ET.SubElement(cac_TaxTotal_2, "cbc:RoundingAmount")
+                    cbc_RoundingAmount.set("currencyID", sales_invoice_doc.currency)
+                    cbc_RoundingAmount.text=str(abs(round(single_item.base_net_amount + (item_tax_percentage * single_item.base_net_amount / 100),2)))
+                    cac_Item = ET.SubElement(cac_InvoiceLine, "cac:Item")
+                    cbc_Name = ET.SubElement(cac_Item, "cbc:Name")
+                    cbc_Name.text = single_item.item_code
+                    cac_ClassifiedTaxCategory = ET.SubElement(cac_Item, "cac:ClassifiedTaxCategory")
+                    cbc_ID_11 = ET.SubElement(cac_ClassifiedTaxCategory, "cbc:ID")
+                    if sales_invoice_doc.custom_zatca_tax_category == "Standard":
+                        cbc_ID_11 .text = "S"
+                    elif sales_invoice_doc.custom_zatca_tax_category == "Zero Rated":
+                        cbc_ID_11 .text = "Z"
+                    elif sales_invoice_doc.custom_zatca_tax_category == "Exempted":
+                        cbc_ID_11 .text = "E"
+                    elif sales_invoice_doc.custom_zatca_tax_category == "Services outside scope of tax / Not subject to VAT":
+                        cbc_ID_11 .text = "O"
+                    cbc_Percent_2 = ET.SubElement(cac_ClassifiedTaxCategory, "cbc:Percent")
+                    cbc_Percent_2.text = f"{float(item_tax_percentage):.2f}"
+                    cac_TaxScheme_4 = ET.SubElement(cac_ClassifiedTaxCategory, "cac:TaxScheme")
+                    cbc_ID_12 = ET.SubElement(cac_TaxScheme_4, "cbc:ID")
+                    cbc_ID_12.text = "VAT"
+                    cac_Price = ET.SubElement(cac_InvoiceLine, "cac:Price")
+                    cbc_PriceAmount = ET.SubElement(cac_Price, "cbc:PriceAmount")
+                    cbc_PriceAmount.set("currencyID", sales_invoice_doc.currency)
+                    cbc_PriceAmount.text =  str(abs(single_item.base_net_rate))
+                    
+                return invoice
+            except Exception as e:
+                    frappe.throw("error occured in item data"+ str(e) )
+
+def item_data_with_template(invoice, sales_invoice_doc):
+    try:
+        for single_item in sales_invoice_doc.items:
+            item_tax_template = frappe.get_doc('Item Tax Template', single_item.item_tax_template)
+            item_tax_percentage = item_tax_template.taxes[0].tax_rate if item_tax_template.taxes else 15
+            
+            cac_InvoiceLine = ET.SubElement(invoice, "cac:InvoiceLine")
+            cbc_ID_10 = ET.SubElement(cac_InvoiceLine, "cbc:ID")
+            cbc_ID_10.text = str(single_item.idx)
+            cbc_InvoicedQuantity = ET.SubElement(cac_InvoiceLine, "cbc:InvoicedQuantity")
+            cbc_InvoicedQuantity.set("unitCode", str(single_item.uom))
+            cbc_InvoicedQuantity.text = str(abs(single_item.qty))
+            cbc_LineExtensionAmount_1 = ET.SubElement(cac_InvoiceLine, "cbc:LineExtensionAmount")
+            cbc_LineExtensionAmount_1.set("currencyID", sales_invoice_doc.currency)
+            cbc_LineExtensionAmount_1.text = str(abs(single_item.base_net_amount))
+            
+            cac_TaxTotal_2 = ET.SubElement(cac_InvoiceLine, "cac:TaxTotal")
+            cbc_TaxAmount_3 = ET.SubElement(cac_TaxTotal_2, "cbc:TaxAmount")
+            cbc_TaxAmount_3.set("currencyID", sales_invoice_doc.currency)
+            cbc_TaxAmount_3.text = str(abs(round(item_tax_percentage * single_item.base_net_amount / 100, 2)))
+            cbc_RoundingAmount = ET.SubElement(cac_TaxTotal_2, "cbc:RoundingAmount")
+            cbc_RoundingAmount.set("currencyID", sales_invoice_doc.currency)
+            cbc_RoundingAmount.text = str(abs(round(single_item.base_net_amount + (item_tax_percentage * single_item.base_net_amount / 100), 2)))
+            
+            cac_Item = ET.SubElement(cac_InvoiceLine, "cac:Item")
+            cbc_Name = ET.SubElement(cac_Item, "cbc:Name")
+            cbc_Name.text = single_item.item_code
+            
+            cac_ClassifiedTaxCategory = ET.SubElement(cac_Item, "cac:ClassifiedTaxCategory")
+            cbc_ID_11 = ET.SubElement(cac_ClassifiedTaxCategory, "cbc:ID")
+            zatca_tax_category = item_tax_template.custom_zatca_tax_category
+            if zatca_tax_category == "Standard":
+                cbc_ID_11.text = "S"
+            elif zatca_tax_category == "Zero Rated":
+                cbc_ID_11.text = "Z"
+            elif zatca_tax_category == "Exempted":
+                cbc_ID_11.text = "E"
+            elif zatca_tax_category == "Services outside scope of tax / Not subject to VAT":
+                cbc_ID_11.text = "O"
+            
+            cbc_Percent_2 = ET.SubElement(cac_ClassifiedTaxCategory, "cbc:Percent")
+            cbc_Percent_2.text = f"{float(item_tax_percentage):.2f}"
+            
+            cac_TaxScheme_4 = ET.SubElement(cac_ClassifiedTaxCategory, "cac:TaxScheme")
+            cbc_ID_12 = ET.SubElement(cac_TaxScheme_4, "cbc:ID")
+            cbc_ID_12.text = "VAT"
+            
+            cac_Price = ET.SubElement(cac_InvoiceLine, "cac:Price")
+            cbc_PriceAmount = ET.SubElement(cac_Price, "cbc:PriceAmount")
+            cbc_PriceAmount.set("currencyID", sales_invoice_doc.currency)
+            cbc_PriceAmount.text = str(abs(single_item.base_net_rate))
+            
+        return invoice
+    except Exception as e:
+        frappe.throw("Error occurred in item data" + str(e))
+
+
+def xml_structuring(invoice,sales_invoice_doc):
+            try:
+                xml_declaration = "<?xml version='1.0' encoding='UTF-8'?>\n"
+                tree = ET.ElementTree(invoice)
+                with open(frappe.local.site + "/private/files/xml_files.xml", 'wb') as file:
+                    tree.write(file, encoding='utf-8', xml_declaration=True)
+                with open(frappe.local.site + "/private/files/xml_files.xml", 'r') as file:
+                    xml_string = file.read()
+                xml_dom = minidom.parseString(xml_string)
+                pretty_xml_string = xml_dom.toprettyxml(indent="  ")   # created xml into formatted xml form 
+                with open(frappe.local.site + "/private/files/finalzatcaxml.xml", 'w') as file:
+                    file.write(pretty_xml_string)
+                          # Attach the getting xml for each invoice
+                try:
+                    if frappe.db.exists("File",{ "attached_to_name": sales_invoice_doc.name, "attached_to_doctype": sales_invoice_doc.doctype }):
+                        frappe.db.delete("File",{ "attached_to_name":sales_invoice_doc.name, "attached_to_doctype": sales_invoice_doc.doctype })
+                except Exception as e:
+                    frappe.throw(frappe.get_traceback())
+                
+                try:
+                    fileX = frappe.get_doc(
+                        {   "doctype": "File",        
+                            "file_type": "xml",  
+                            "file_name":  "E-invoice-" + sales_invoice_doc.name + ".xml",
+                            "attached_to_doctype":sales_invoice_doc.doctype,
+                            "attached_to_name":sales_invoice_doc.name, 
+                            "content": pretty_xml_string,
+                            "is_private": 1,})
+                    fileX.save()
+                except Exception as e:
+                    frappe.throw(frappe.get_traceback())
+                
+                try:
+                    frappe.db.get_value('File', {'attached_to_name':sales_invoice_doc.name, 'attached_to_doctype': sales_invoice_doc.doctype}, ['file_name'])
+                except Exception as e:
+                    frappe.throw(frappe.get_traceback())
+            except Exception as e:
+                    frappe.throw("Error occured in XML structuring and attach. Please contact your system administrator"+ str(e) )
\ No newline at end of file
diff --git a/zatca_ksa/zatca_ksa/doctype/__init__.py b/zatca_ksa/zatca_ksa/doctype/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/__init__.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/test_zatca_ksa_setting.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/test_zatca_ksa_setting.py
new file mode 100644
index 0000000..f5b1c5f
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/test_zatca_ksa_setting.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, KSA and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestZatcaKSASetting(FrappeTestCase):
+	pass
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.js b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.js
new file mode 100644
index 0000000..95ebc24
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.js
@@ -0,0 +1,67 @@
+// Copyright (c) 2024, KSA and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Zatca KSA Setting", {
+	refresh(frm) {
+       
+    },
+    production_csid: function (frm) {
+        frappe.call({
+            method: "zatca_ksa.zatca_ksa.sign_invoice.production_CSID",
+            args: {
+              
+            },
+            callback: function (r) {
+                if (!r.exc) {
+                    frm.save();
+                }
+            },
+        });
+    },
+    csid_attach: function (frm) {
+            frappe.call({
+                method: "zatca_ksa.zatca_ksa.sign_invoice.create_CSID",
+                args: {
+                  
+                },
+                callback: function (r) {
+                    if (!r.exc) {
+                        frm.save();
+                    }
+                },
+            });
+        },
+    create_csr: function (frm) {
+        frappe.call({
+            method: "zatca_ksa.zatca_ksa.sign_invoice.create_csr",
+            args: {
+                "portal_type":  frm.doc.select
+            },
+            callback: function (r) {
+                if (!r.exc) {
+                    frm.save();
+                }
+            },
+        });
+    },
+    check_compliance: function (frm) {
+         
+            frappe.call({
+            method: "zatca_ksa.zatca_ksa.sign_invoice.zatca_Call_compliance",
+            args: {
+                "invoice_number": frm.doc.sample_invoice_to_test,
+                "compliance_type": "1"
+            },
+            callback: function (r) {
+                if (!r.exc) {
+                    frm.save();
+                  
+                }
+            },
+            
+        });
+    }
+    
+});
+
+
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.json b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.json
new file mode 100644
index 0000000..e0076c9
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.json
@@ -0,0 +1,255 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-05-08 11:32:46.332033",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "company",
+  "details_and_otp_section",
+  "zatca_invoice_enabled",
+  "background",
+  "send_invoice_to_zatca",
+  "select",
+  "csr_config",
+  "create_csr",
+  "csr_data",
+  "attach_xml_with_invoice",
+  "attach_xml_with_qr_code",
+  "attach_qr_code_doctype",
+  "attach_e_invoice_send_status_with_invoice",
+  "pih",
+  "keys_for_zatca_section",
+  "private_key",
+  "public_key",
+  "certificate",
+  "urls__api_endpoints_section",
+  "sandbox_url",
+  "simulation_url",
+  "production_url",
+  "compliance_csid_generation_section",
+  "otp",
+  "csid_attach",
+  "basic_auth",
+  "compliance_request_id",
+  "zatca_compliance_check_check_all_options_below_section",
+  "validation_type",
+  "sample_invoice_to_test",
+  "check_compliance",
+  "production__csid__generation_section",
+  "production_csid",
+  "basic_auth_production"
+ ],
+ "fields": [
+  {
+   "fieldname": "details_and_otp_section",
+   "fieldtype": "Section Break",
+   "label": "Details and OTP"
+  },
+  {
+   "default": "0",
+   "fieldname": "zatca_invoice_enabled",
+   "fieldtype": "Check",
+   "label": "Zatca invoice enabled"
+  },
+  {
+   "fieldname": "send_invoice_to_zatca",
+   "fieldtype": "Select",
+   "label": "Send invoice to zatca",
+   "options": "Live\nBatches"
+  },
+  {
+   "fieldname": "select",
+   "fieldtype": "Select",
+   "label": "Select",
+   "options": "Simulation\nSandbox\nProduction"
+  },
+  {
+   "fieldname": "create_csr",
+   "fieldtype": "Button",
+   "label": "Create CSR"
+  },
+  {
+   "default": "0",
+   "fieldname": "attach_xml_with_invoice",
+   "fieldtype": "Check",
+   "label": "Attach XML with invoice"
+  },
+  {
+   "default": "0",
+   "fieldname": "attach_xml_with_qr_code",
+   "fieldtype": "Check",
+   "label": "Attach XML with QR code"
+  },
+  {
+   "default": "0",
+   "fieldname": "attach_qr_code_doctype",
+   "fieldtype": "Check",
+   "label": "Attach QR code doctype"
+  },
+  {
+   "default": "0",
+   "fieldname": "attach_e_invoice_send_status_with_invoice",
+   "fieldtype": "Check",
+   "label": "Attach e_invoice send status with invoice"
+  },
+  {
+   "default": "0",
+   "fieldname": "pih",
+   "fieldtype": "Small Text",
+   "label": "pih"
+  },
+  {
+   "fieldname": "urls__api_endpoints_section",
+   "fieldtype": "Section Break",
+   "label": "URLs / API EndPoints"
+  },
+  {
+   "fieldname": "sandbox_url",
+   "fieldtype": "Data",
+   "label": "Sandbox URL"
+  },
+  {
+   "fieldname": "simulation_url",
+   "fieldtype": "Data",
+   "label": "Simulation URL"
+  },
+  {
+   "fieldname": "production_url",
+   "fieldtype": "Data",
+   "label": "Production URL"
+  },
+  {
+   "fieldname": "compliance_csid_generation_section",
+   "fieldtype": "Section Break",
+   "label": "Compliance CSID Generation"
+  },
+  {
+   "fieldname": "otp",
+   "fieldtype": "Data",
+   "label": "OTP"
+  },
+  {
+   "fieldname": "csid_attach",
+   "fieldtype": "Button",
+   "label": "Generate Compliance CSID"
+  },
+  {
+   "fieldname": "basic_auth",
+   "fieldtype": "Long Text",
+   "label": "Basic Auth from CSID"
+  },
+  {
+   "fieldname": "compliance_request_id",
+   "fieldtype": "Small Text",
+   "label": "Compliance request id "
+  },
+  {
+   "fieldname": "zatca_compliance_check_check_all_options_below_section",
+   "fieldtype": "Section Break",
+   "label": "Zatca Compliance Check. Check all options below."
+  },
+  {
+   "fieldname": "validation_type",
+   "fieldtype": "Select",
+   "label": "Validation Type",
+   "options": "Simplified Invoice\nStandard Invoice\nSimplified Credit Note\nStandard Credit Note\nSimplified Debit Note\nStandard Debit Note"
+  },
+  {
+   "fieldname": "check_compliance",
+   "fieldtype": "Button",
+   "label": "Check Compliance"
+  },
+  {
+   "fieldname": "production__csid__generation_section",
+   "fieldtype": "Section Break",
+   "label": "Production  CSID  Generation"
+  },
+  {
+   "fieldname": "production_csid",
+   "fieldtype": "Button",
+   "label": "Generate Production CSID"
+  },
+  {
+   "fieldname": "basic_auth_production",
+   "fieldtype": "Long Text",
+   "label": "Basic Auth from production"
+  },
+  {
+   "fieldname": "csr_data",
+   "fieldtype": "Long Text",
+   "label": "CSR Data"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company"
+  },
+  {
+   "fieldname": "sample_invoice_to_test",
+   "fieldtype": "Data",
+   "label": "Sample Invoice Number to Test"
+  },
+  {
+   "default": "0",
+   "fieldname": "background",
+   "fieldtype": "Check",
+   "label": "Send Einvoice background"
+  },
+  {
+   "default": "0",
+   "fieldname": "private_key",
+   "fieldtype": "Small Text",
+   "label": "Private key"
+  },
+  {
+   "fieldname": "keys_for_zatca_section",
+   "fieldtype": "Section Break",
+   "label": "Keys & Certificate For Zatca"
+  },
+  {
+   "default": "0",
+   "fieldname": "certificate",
+   "fieldtype": "Long Text",
+   "label": "certificate"
+  },
+  {
+   "default": "0",
+   "fieldname": "public_key",
+   "fieldtype": "Small Text",
+   "label": "public key"
+  },
+  {
+   "default": "0",
+   "fieldname": "csr_config",
+   "fieldtype": "Long Text",
+   "label": "CSR Config"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "issingle": 1,
+ "links": [],
+ "modified": "2024-05-22 15:48:29.840716",
+ "modified_by": "Administrator",
+ "module": "Zatca KSA",
+ "name": "Zatca KSA Setting",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "print": 1,
+   "read": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.py
new file mode 100644
index 0000000..c60456d
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_setting/zatca_ksa_setting.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, KSA and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ZatcaKSASetting(Document):
+	pass
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/__init__.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/test_zatca_ksa_success_log.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/test_zatca_ksa_success_log.py
new file mode 100644
index 0000000..f741c79
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/test_zatca_ksa_success_log.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, KSA and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestZatcaKSASuccessLog(FrappeTestCase):
+	pass
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.js b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.js
new file mode 100644
index 0000000..a88b3dc
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, KSA and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Zatca KSA Success Log", {
+// 	refresh(frm) {
+
+// 	},
+// });
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.json b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.json
new file mode 100644
index 0000000..24a86a9
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.json
@@ -0,0 +1,73 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-05-08 14:46:12.538326",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "message",
+  "zatca_response",
+  "invoice_number",
+  "time",
+  "uuid"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "label": "Title"
+  },
+  {
+   "fieldname": "message",
+   "fieldtype": "Long Text",
+   "label": "Message"
+  },
+  {
+   "fieldname": "zatca_response",
+   "fieldtype": "Long Text",
+   "label": "zatca_response"
+  },
+  {
+   "fieldname": "invoice_number",
+   "fieldtype": "Data",
+   "label": "Invoice Number"
+  },
+  {
+   "fieldname": "time",
+   "fieldtype": "Data",
+   "label": "Time"
+  },
+  {
+   "fieldname": "uuid",
+   "fieldtype": "Small Text",
+   "label": "UUID"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-05-08 14:49:54.078941",
+ "modified_by": "Administrator",
+ "module": "Zatca KSA",
+ "name": "Zatca KSA Success Log",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
diff --git a/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.py b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.py
new file mode 100644
index 0000000..fcce1fe
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/doctype/zatca_ksa_success_log/zatca_ksa_success_log.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, KSA and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ZatcaKSASuccessLog(Document):
+	pass
diff --git a/zatca_ksa/zatca_ksa/sign_invoice.py b/zatca_ksa/zatca_ksa/sign_invoice.py
new file mode 100644
index 0000000..4c7af1f
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/sign_invoice.py
@@ -0,0 +1,1312 @@
+from lxml import etree
+import hashlib
+import base64 
+import lxml.etree as MyTree
+from datetime import datetime
+import xml.etree.ElementTree as ET
+import frappe
+from zatca_ksa.zatca_ksa.createxml import xml_tags,salesinvoice_data,invoice_Typecode_Simplified,invoice_Typecode_Standard,doc_Reference,additional_Reference ,company_Data,customer_Data,delivery_And_PaymentMeans,tax_Data,item_data,xml_structuring,invoice_Typecode_Compliance,delivery_And_PaymentMeans_for_Compliance,doc_Reference_compliance,get_tax_total_from_items,tax_Data_with_template,item_data_with_template
+import pyqrcode
+# frappe.init(site="prod.ksa.com")
+# frappe.connect()
+import binascii
+from cryptography import x509
+from cryptography.hazmat._oid import NameOID
+from cryptography.hazmat.backends import default_backend
+from cryptography.hazmat.bindings._rust import ObjectIdentifier
+from cryptography.hazmat.primitives import serialization, hashes
+from cryptography.hazmat.primitives.asymmetric import ec
+import json
+import requests
+from cryptography.hazmat.primitives import serialization
+
+def get_csr_data():
+    try:
+   
+            settings = frappe.get_doc('Zatca KSA Setting')
+            file = settings.csr_config
+            lines = file.splitlines()
+            # Initialize variables
+            csr_common_name = None
+            csr_serial_number = None
+            csr_organization_identifier = None
+            csr_organization_unit_name = None
+            csr_organization_name = None
+            csr_country_name = None
+            csr_invoice_type = None
+            csr_location_address = None
+            csr_industry_business_category = None
+
+            for line in lines:
+                parts = line.split('=')
+                if len(parts) == 2:
+                    key, value = parts
+                    if key == 'csr.common.name':
+                        csr_common_name = value
+                    elif key == 'csr.serial.number':
+                        csr_serial_number = value
+                    elif key == 'csr.organization.identifier':
+                        csr_organization_identifier = value
+                    elif key == 'csr.organization.unit.name':
+                        csr_organization_unit_name = value
+                    elif key == 'csr.organization.name':
+                        csr_organization_name = value
+                    elif key == 'csr.country.name':
+                        csr_country_name = value
+                    elif key == 'csr.invoice.type':
+                        csr_invoice_type = value
+                    elif key == 'csr.location.address':
+                        csr_location_address = value
+                    elif key == 'csr.industry.business.category':
+                        csr_industry_business_category = value
+
+            return csr_common_name,csr_serial_number,csr_organization_identifier,csr_organization_unit_name,csr_organization_name,csr_country_name,csr_invoice_type,csr_location_address,csr_industry_business_category
+    except Exception as e:
+                frappe.throw(" error in get csr data: "+ str(e) )
+
+def create_private_keys():
+            try:
+                settings = frappe.get_doc('Zatca KSA Setting')
+                company = settings.company
+                private_key = ec.generate_private_key(ec.SECP256K1(), backend=default_backend())
+                private_key_pem = private_key.private_bytes(
+                    encoding=serialization.Encoding.PEM,
+                    format=serialization.PrivateFormat.TraditionalOpenSSL,
+                    encryption_algorithm=serialization.NoEncryption()
+                )
+                company_name = frappe.db.get_value("Company", company, "abbr")
+                settings.set("private_key",private_key_pem.decode('utf-8'))
+                settings.save(ignore_permissions=True)
+                
+                return private_key_pem
+            except Exception as e:
+                    frappe.throw(" error in creating private key: "+ str(e) )
+
+
+@frappe.whitelist(allow_guest=True)
+def create_csr(portal_type):
+    try:
+        try:
+            csr_common_name,csr_serial_number,csr_organization_identifier,csr_organization_unit_name,csr_organization_name,csr_country_name,csr_invoice_type,csr_location_address,csr_industry_business_category = get_csr_data()
+        except Exception as e:
+            frappe.throw("Error in retrieving CSR data: " + str(e))  
+        try:
+            if portal_type == "Sandbox":
+                customoid = b"..TESTZATCA-Code-Signing"
+            elif portal_type == "Simulation":
+                customoid = b"..PREZATCA-Code-Signing"
+            else:
+                customoid = b"..ZATCA-Code-Signing"
+        except Exception as e:
+            frappe.throw("Error in portal type: " + str(e)) 
+        try:
+            private_key_pem = create_private_keys()
+            private_key = serialization.load_pem_private_key(private_key_pem, password=None, backend=default_backend())
+        except Exception as e:
+            frappe.throw("Error in private key : " + str(e))
+        try:
+            custom_oid_string = "2.5.9.3.7.1.982.20.2"
+            custom_value = customoid 
+            oid = ObjectIdentifier(custom_oid_string)
+            custom_extension = x509.extensions.UnrecognizedExtension(oid, custom_value) 
+            dn = x509.Name([
+                x509.NameAttribute(NameOID.COMMON_NAME, csr_common_name),  # csr.common.name
+                x509.NameAttribute(NameOID.COUNTRY_NAME, csr_country_name),   # csr.country.name -  has to be two digits 
+                x509.NameAttribute(NameOID.ORGANIZATION_NAME, csr_organization_name),   # csr.organization.name
+                x509.NameAttribute(NameOID.ORGANIZATIONAL_UNIT_NAME, csr_organization_unit_name), # csr.organization.unit.name
+            ])
+            alt_name = x509.SubjectAlternativeName({
+                x509.DirectoryName(x509.Name([
+                    x509.NameAttribute(NameOID.SURNAME, csr_serial_number),   # csr.serial.number-- has to be this format 
+                    x509.NameAttribute(NameOID.USER_ID, csr_organization_identifier),   # csr.organization.identifier - has to be 13 digit with starting and ending digit 3  
+                    x509.NameAttribute(NameOID.TITLE, csr_invoice_type),  # csr.invoice.type - has to be 1100
+                    x509.NameAttribute(NameOID.BUSINESS_CATEGORY, csr_industry_business_category + "/registeredAddress=" + csr_location_address),   # csr.location.address
+                ])),
+            })
+        except Exception as e:
+                    frappe.throw(" error in csr creating values: "+ str(e) )
+        try:
+            csr = (
+                x509.CertificateSigningRequestBuilder()
+                .subject_name(dn)
+                .add_extension(custom_extension, critical=False)
+                .add_extension(alt_name, critical=False)
+                .sign(private_key, hashes.SHA256(), backend=default_backend())
+            )
+            mycsr = csr.public_bytes(serialization.Encoding.PEM)
+            base64csr = base64.b64encode(mycsr)
+            encoded_string = base64csr.decode('utf-8')
+        except Exception as e:
+                    frappe.throw(" error in encoding csr string: "+ str(e) )
+        settings = frappe.get_doc('Zatca KSA Setting')
+        settings.set("csr_data", encoded_string)
+        settings.save(ignore_permissions=True)
+        frappe.msgprint("CSR generation successful.CSR saved")
+        
+        return encoded_string
+    
+    except Exception as e:
+                    frappe.throw(" error in creating csr: "+ str(e) )
+
+def get_API_url(base_url):
+                try:
+                    settings =  frappe.get_doc('Zatca KSA Setting')
+                    if settings.select == "Sandbox":
+                        url = settings.sandbox_url + base_url
+                    elif settings.select == "Simulation":
+                        url = settings.simulation_url + base_url
+                    else:
+                        url = settings.production_url + base_url
+                    return url 
+                except Exception as e:
+                    frappe.throw(" getting url failed"+ str(e) ) 
+
+def update_json_data_csid(existing_data, company_name, csid):
+                    try:
+                        company_exists = False
+                        for entry in existing_data["data"]:
+                            if entry["company"] == company_name:
+                                
+                                entry["csid"] = csid
+                                company_exists = True
+                                break
+                        if not company_exists:
+                            existing_data["data"].append({
+                                "company": company_name,
+                                "csid": csid
+                            })
+
+                        return existing_data
+                    except Exception as e:
+                            frappe.throw("error json data of request id: " + str(e))
+
+def update_json_data_request_id(existing_data, company_name, request_id):
+                    try:
+                        company_exists = False
+                        for entry in existing_data["data"]:
+                            if entry["company"] == company_name:
+                                entry["request_id"] = request_id
+                                company_exists = True
+                                break
+                        if not company_exists:
+                            existing_data["data"].append({
+                                "company": company_name,
+                                "request_id": request_id
+                            })
+
+                        return existing_data
+                    except Exception as e:
+                                        frappe.throw("error json data of request id: " + str(e))
+   
+def update_json_data_production_csid(existing_data, company_name, production_csid):
+                    try:
+                        company_exists = False
+                        for entry in existing_data["companies"]:
+                            if entry["company"] == company_name:
+                                entry["production_csid"] = production_csid
+                                company_exists = True
+                                break
+                        if not company_exists:
+                            existing_data["companies"].append({
+                                "company": company_name,
+                                "production_csid": production_csid
+                            })
+                        return existing_data
+                    except Exception as e:
+                                frappe.throw("error json data of production csid: " + str(e))
+
+@frappe.whitelist(allow_guest=True)
+def create_CSID():
+            try:
+                    settings = frappe.get_doc('Zatca KSA Setting')
+                    company = settings.company
+                    company_name = frappe.db.get_value("Company", company, "abbr")
+                    csr_contents = settings.csr_data
+                    payload = json.dumps({
+                    "csr": csr_contents
+                    })
+                    headers = {
+                    'accept': 'application/json',
+                    'OTP': settings.otp,
+                    'Accept-Version': 'V2',
+                    'Content-Type': 'application/json',
+                    'Cookie': 'TS0106293e=0132a679c07382ce7821148af16b99da546c13ce1dcddbef0e19802eb470e539a4d39d5ef63d5c8280b48c529f321e8b0173890e4f'
+                    }
+                    
+                    response = requests.request("POST", url=get_API_url(base_url="compliance"), headers=headers, data=payload)
+                
+                    if response.status_code == 400:
+                        frappe.throw("Error: " + "OTP is not valid", response.text)
+                    if response.status_code != 200:
+                        frappe.throw("Error: " + "Error in Certificate or OTP: " + "<br> <br>" + response.text)
+                    
+                    frappe.msgprint(str(response.content))
+                    data=json.loads(response.text)
+                    
+                    concatenated_value = data["binarySecurityToken"] + ":" + data["secret"]
+                    encoded_value = base64.b64encode(concatenated_value.encode()).decode()
+                    settings.set("certificate",base64.b64decode(data["binarySecurityToken"]).decode('utf-8'))
+                    settings.save(ignore_permissions=True)
+                    basic_auth = settings.get("basic_auth", "{}")
+                    # frappe.msgprint(basic_auth)
+                    try:
+                        basic_auth_data = json.loads(basic_auth)
+                    except json.JSONDecodeError:
+                        basic_auth_data = {"data": []}
+                    except:
+                        basic_auth_data = {"data": []}
+                    updated_basic_auth_data = update_json_data_csid(basic_auth_data, company_name, encoded_value)
+                    settings.set("basic_auth", json.dumps(updated_basic_auth_data))
+                    compliance_request_id = settings.get("compliance_request_id", "{}")
+                    try:
+                        compliance_request_id_data = json.loads(compliance_request_id)
+                        # Ensure that compliance_request_id_data is a dictionary with a "data" key.
+                        if not isinstance(compliance_request_id_data, dict) or "data" not in compliance_request_id_data:
+                            raise ValueError("Invalid format for compliance_request_id_data")
+                    except (json.JSONDecodeError, ValueError):
+                        compliance_request_id_data = {"data": []}
+                    except:
+                        compliance_request_id_data = {"data": []}
+                    updated_compliance_request_id_data = update_json_data_request_id(compliance_request_id_data, company_name, data["requestID"])
+                    settings.set("compliance_request_id", json.dumps(updated_compliance_request_id_data))
+                    settings.save(ignore_permissions=True)
+                
+            except Exception as e:
+                    frappe.throw(" error in creating CSID: "+ str(e) )
+
+
+def create_public_key():
+            try:
+                settings = frappe.get_doc('Zatca KSA Setting')
+                company = settings.company
+                company_name = frappe.db.get_value("Company", company, "abbr")
+                base_64 = settings.certificate
+                cert_base64 = """
+                -----BEGIN CERTIFICATE-----
+                {base_64}
+                -----END CERTIFICATE-----
+                """.format(base_64=base_64)
+                cert = x509.load_pem_x509_certificate(cert_base64.encode(), default_backend())
+                public_key = cert.public_key()
+                public_key_pem = public_key.public_bytes(encoding=serialization.Encoding.PEM, format=serialization.PublicFormat.SubjectPublicKeyInfo)
+                
+                settings.set("public_key",public_key_pem)
+                settings.save(ignore_permissions=True)
+            except Exception as e:
+                    frappe.throw(" error in public key creation: "+ str(e) )
+
+def removeTags(finalzatcaxml):
+                try:
+                    #Code corrected by Farook K - KSA
+                    xml_file = MyTree.fromstring(finalzatcaxml)
+                    xsl_file = MyTree.fromstring('''<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+                                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
+                                    xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
+                                    xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
+                                    xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
+                                    xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"
+                                    exclude-result-prefixes="xs"
+                                    version="2.0">
+                                    <xsl:output omit-xml-declaration="yes" encoding="utf-8" indent="no"/>
+                                    <xsl:template match="node() | @*">
+                                        <xsl:copy>
+                                            <xsl:apply-templates select="node() | @*"/>
+                                        </xsl:copy>
+                                    </xsl:template>
+                                    <xsl:template match="//*[local-name()='Invoice']//*[local-name()='UBLExtensions']"></xsl:template>
+                                    <xsl:template match="//*[local-name()='AdditionalDocumentReference'][cbc:ID[normalize-space(text()) = 'QR']]"></xsl:template>
+                                        <xsl:template match="//*[local-name()='Invoice']/*[local-name()='Signature']"></xsl:template>
+                                    </xsl:stylesheet>''')
+                    transform = MyTree.XSLT(xsl_file.getroottree())
+                    transformed_xml = transform(xml_file.getroottree())
+                    return transformed_xml
+                except Exception as e:
+                                frappe.throw(" error in remove tags: "+ str(e) )
+                    
+
+def canonicalize_xml (tag_removed_xml):
+                try:
+                    #Code corrected by Farook K - KSA
+                    canonical_xml = etree.tostring(tag_removed_xml, method="c14n").decode()
+                    return canonical_xml    
+                except Exception as e:
+                            frappe.throw(" error in canonicalise xml: "+ str(e) )    
+
+def getInvoiceHash(canonicalized_xml):
+        try:
+            #Code corrected by Farook K - KSA
+            hash_object = hashlib.sha256(canonicalized_xml.encode())
+            hash_hex = hash_object.hexdigest()
+            # print(hash_hex)
+            hash_base64 = base64.b64encode(bytes.fromhex(hash_hex)).decode('utf-8')
+            # base64_encoded = base64.b64encode(hash_hex.encode()).decode()
+            return hash_hex,hash_base64
+        except Exception as e:
+                    frappe.throw(" error in Invoice hash of xml: "+ str(e) )
+    
+    
+def digital_signature(hash1):
+                    try:
+                        settings = frappe.get_doc('Zatca KSA Setting')
+                        company = settings.company
+                        company_name = frappe.db.get_value("Company", company, "abbr")
+                        
+                        key_file = settings.private_key
+                        private_key_bytes = key_file.encode('utf-8')
+                        private_key = serialization.load_pem_private_key(private_key_bytes, password=None, backend=default_backend())
+                        hash_bytes = bytes.fromhex(hash1)
+                        signature = private_key.sign(hash_bytes, ec.ECDSA(hashes.SHA256()))
+                        encoded_signature = base64.b64encode(signature).decode()
+                        return encoded_signature
+                    except Exception as e:
+                             frappe.throw(" error in digital signature: "+ str(e) )
+
+
+def extract_certificate_details():
+            
+            try:    
+                    settings = frappe.get_doc('Zatca KSA Setting')  
+                    company = settings.company
+                    company_name = frappe.db.get_value("Company", company, "abbr")
+                    certificate_content = settings.certificate
+                    formatted_certificate = "-----BEGIN CERTIFICATE-----\n"
+                    formatted_certificate += "\n".join(certificate_content[i:i+64] for i in range(0, len(certificate_content), 64))
+                    formatted_certificate += "\n-----END CERTIFICATE-----\n"
+                    certificate_bytes = formatted_certificate.encode('utf-8')
+                    cert = x509.load_pem_x509_certificate(certificate_bytes, default_backend())
+                    formatted_issuer_name = cert.issuer.rfc4514_string()
+                    issuer_name = ", ".join([x.strip() for x in formatted_issuer_name.split(',')])
+                    serial_number = cert.serial_number
+                    return issuer_name, serial_number
+            except Exception as e:
+                             frappe.throw(" error in extracting certificate details: "+ str(e) )
+    
+
+def certificate_hash():
+            
+            try:
+                settings = frappe.get_doc('Zatca KSA Setting')
+                company = settings.company
+                company_name = frappe.db.get_value("Company", company, "abbr")
+                certificate_data= settings.certificate
+                certificate_data_bytes = certificate_data.encode('utf-8')
+                sha256_hash = hashlib.sha256(certificate_data_bytes).hexdigest()
+                base64_encoded_hash = base64.b64encode(sha256_hash.encode('utf-8')).decode('utf-8')
+                return base64_encoded_hash
+            
+            except Exception as e:
+                    frappe.throw("error in obtaining certificate hash: "+ str(e) )
+
+
+def signxml_modify():
+                try:
+                    encoded_certificate_hash= certificate_hash()
+                    issuer_name, serial_number = extract_certificate_details()
+                    original_invoice_xml = etree.parse(frappe.local.site + '/private/files/finalzatcaxml.xml')
+                    root = original_invoice_xml.getroot()
+                    namespaces = {
+                    'ext': 'urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2',
+                    'sig': 'urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2',
+                    'sac':"urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2", 
+                    'xades': 'http://uri.etsi.org/01903/v1.3.2#',
+                    'ds': 'http://www.w3.org/2000/09/xmldsig#'}
+                    ubl_extensions_xpath = "//*[local-name()='Invoice']//*[local-name()='UBLExtensions']"
+                    qr_xpath = "//*[local-name()='AdditionalDocumentReference'][cbc:ID[normalize-space(text()) = 'QR']]"
+                    signature_xpath = "//*[local-name()='Invoice']//*[local-name()='Signature']"
+                    xpath_dv = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties/xades:SignedSignatureProperties/xades:SigningCertificate/xades:Cert/xades:CertDigest/ds:DigestValue")
+                    xpath_signTime = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties/xades:SignedSignatureProperties/xades:SigningTime")
+                    xpath_issuerName = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties/xades:SignedSignatureProperties/xades:SigningCertificate/xades:Cert/xades:IssuerSerial/ds:X509IssuerName")
+                    xpath_serialNum = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:Object/xades:QualifyingProperties/xades:SignedProperties//xades:SignedSignatureProperties/xades:SigningCertificate/xades:Cert/xades:IssuerSerial/ds:X509SerialNumber")
+                    element_dv = root.find(xpath_dv, namespaces)
+                    element_st = root.find(xpath_signTime, namespaces)
+                    element_in = root.find(xpath_issuerName, namespaces)
+                    element_sn = root.find(xpath_serialNum, namespaces)
+                    element_dv.text = (encoded_certificate_hash)
+                    element_st.text =  datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S')
+                    signing_time =element_st.text
+                    element_in.text = issuer_name
+                    element_sn.text = str(serial_number)
+                    with open(frappe.local.site + "/private/files/after_step_4.xml", 'wb') as file:
+                        original_invoice_xml.write(file,encoding='utf-8',xml_declaration=True,)
+                    return namespaces ,signing_time
+                except Exception as e:
+                    frappe.throw(" error in modification of xml sign part: "+ str(e) )
+
+def generate_Signed_Properties_Hash(signing_time,issuer_name,serial_number,encoded_certificate_hash):
+            try:
+                xml_string = '''<xades:SignedProperties xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" Id="xadesSignedProperties">
+                                    <xades:SignedSignatureProperties>
+                                        <xades:SigningTime>{signing_time}</xades:SigningTime>
+                                        <xades:SigningCertificate>
+                                            <xades:Cert>
+                                                <xades:CertDigest>
+                                                    <ds:DigestMethod xmlns:ds="http://www.w3.org/2000/09/xmldsig#" Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
+                                                    <ds:DigestValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">{certificate_hash}</ds:DigestValue>
+                                                </xades:CertDigest>
+                                                <xades:IssuerSerial>
+                                                    <ds:X509IssuerName xmlns:ds="http://www.w3.org/2000/09/xmldsig#">{issuer_name}</ds:X509IssuerName>
+                                                    <ds:X509SerialNumber xmlns:ds="http://www.w3.org/2000/09/xmldsig#">{serial_number}</ds:X509SerialNumber>
+                                                </xades:IssuerSerial>
+                                            </xades:Cert>
+                                        </xades:SigningCertificate>
+                                    </xades:SignedSignatureProperties>
+                                </xades:SignedProperties>'''
+                xml_string_rendered = xml_string.format(signing_time=signing_time, certificate_hash=encoded_certificate_hash, issuer_name=issuer_name, serial_number=str(serial_number))
+                utf8_bytes = xml_string_rendered.encode('utf-8')
+                hash_object = hashlib.sha256(utf8_bytes)
+                hex_sha256 = hash_object.hexdigest()
+                # print(hex_sha256)
+                signed_properties_base64=  base64.b64encode(hex_sha256.encode('utf-8')).decode('utf-8')
+                # print(signed_properties_base64)
+                return signed_properties_base64
+            except Exception as e:
+                    frappe.throw(" error in generating signed properties hash: "+ str(e) )
+
+
+def populate_The_UBL_Extensions_Output(encoded_signature,namespaces,signed_properties_base64,encoded_hash):
+        try:
+            
+            updated_invoice_xml = etree.parse(frappe.local.site + '/private/files/after_step_4.xml')
+            root3 = updated_invoice_xml.getroot()
+            settings = frappe.get_doc('Zatca KSA Setting')
+            company = settings.company
+            company_name = frappe.db.get_value("Company", company, "abbr")
+            content = settings.certificate
+            xpath_signvalue = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignatureValue")
+            xpath_x509certi = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:KeyInfo/ds:X509Data/ds:X509Certificate")
+            xpath_digvalue = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignedInfo/ds:Reference[@URI='#xadesSignedProperties']/ds:DigestValue")
+            xpath_digvalue2 = ("ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignedInfo/ds:Reference[@Id='invoiceSignedData']/ds:DigestValue")
+            signValue6 = root3.find(xpath_signvalue , namespaces)
+            x509Certificate6 = root3.find(xpath_x509certi , namespaces)
+            digestvalue6 = root3.find(xpath_digvalue , namespaces)
+            digestvalue6_2 = root3.find(xpath_digvalue2 , namespaces)
+            signValue6.text = (encoded_signature)
+            x509Certificate6.text = content
+            digestvalue6.text = (signed_properties_base64)
+            digestvalue6_2.text =(encoded_hash)
+            with open(frappe.local.site + "/private/files/final_xml_after_sign.xml", 'wb') as file:
+                updated_invoice_xml.write(file,encoding='utf-8',xml_declaration=True,)
+        except Exception as e:
+                    frappe.throw(" error in populate ubl extension output: "+ str(e) )
+
+def extract_public_key_data():
+            try:
+
+                settings = frappe.get_doc('Zatca KSA Setting')
+                company = settings.company
+                company_name = frappe.db.get_value("Company", company, "abbr")
+                public_key_pem = settings.public_key
+                lines = public_key_pem.splitlines()
+                key_data = ''.join(lines[1:-1])
+                key_data = key_data.replace('-----BEGIN PUBLIC KEY-----', '').replace('-----END PUBLIC KEY-----', '')
+                key_data = key_data.replace(' ', '').replace('\n', '')
+                
+                return key_data
+            except Exception as e:
+                    frappe.throw(" error in extracting public key data: "+ str(e) )
+
+
+def get_tlv_for_value(tag_num, tag_value):
+                try:
+                    tag_num_buf = bytes([tag_num])
+                    if isinstance(tag_value, str):
+                        if len(tag_value) < 256:
+                            tag_value_len_buf = bytes([len(tag_value)])
+                        else:
+                            tag_value_len_buf = bytes([0xFF, (len(tag_value) >> 8) & 0xFF, len(tag_value) & 0xFF])
+                        tag_value = tag_value.encode('utf-8')
+                    else:
+                        tag_value_len_buf = bytes([len(tag_value)])
+                    return tag_num_buf + tag_value_len_buf + tag_value
+                except Exception as e:
+                    frappe.throw(" error in getting the tlv data value: "+ str(e) )
+
+
+def tag8_publickey():
+                    try:
+                        create_public_key()
+                        base64_encoded = extract_public_key_data() 
+                        
+                        byte_data = base64.b64decode(base64_encoded)
+                        hex_data = binascii.hexlify(byte_data).decode('utf-8')
+                        chunks = [hex_data[i:i + 2] for i in range(0, len(hex_data), 2)]
+                        value = ''.join(chunks)
+                        binary_data = bytes.fromhex(value)
+                        
+                        base64_encoded1 = base64.b64encode(binary_data).decode('utf-8')
+                        return binary_data
+                    except Exception as e: 
+                        frappe.throw(" error in tag 8 from public key: "+ str(e) )
+
+
+def tag9_signature_ecdsa():
+            try:
+
+                settings = frappe.get_doc('Zatca KSA Setting')
+                certificate_content = settings.certificate
+                formatted_certificate = "-----BEGIN CERTIFICATE-----\n"
+                formatted_certificate += "\n".join(certificate_content[i:i+64] for i in range(0, len(certificate_content), 64))
+                formatted_certificate += "\n-----END CERTIFICATE-----\n"
+                # print(formatted_certificate)
+                certificate_bytes = formatted_certificate.encode('utf-8')
+                cert = x509.load_pem_x509_certificate(certificate_bytes, default_backend())
+                signature = cert.signature
+                signature_hex = "".join("{:02x}".format(byte) for byte in signature)
+                signature_bytes = bytes.fromhex(signature_hex)
+                signature_base64 = base64.b64encode(signature_bytes).decode()
+
+                return signature_bytes
+            except Exception as e:
+                    frappe.throw(" error in tag 9 (signaturetag): "+ str(e) )
+
+
+
+def generate_tlv_xml():
+                    try:
+                            with open(frappe.local.site + "/private/files/final_xml_after_sign.xml", 'rb') as file:
+                                xml_data = file.read()
+                            root = etree.fromstring(xml_data)
+                            namespaces = {
+                                'ubl': 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2',
+                                'cac': 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2',
+                                'cbc': 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2',
+                                'ext': 'urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2',
+                                'sig': 'urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2',
+                                'sac': 'urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2',
+                                'ds': 'http://www.w3.org/2000/09/xmldsig#'
+                            }
+                            issue_date_xpath = "/ubl:Invoice/cbc:IssueDate"
+                            issue_time_xpath = "/ubl:Invoice/cbc:IssueTime"
+                            issue_date_results = root.xpath(issue_date_xpath, namespaces=namespaces)
+                            issue_time_results = root.xpath(issue_time_xpath, namespaces=namespaces)
+                            issue_date = issue_date_results[0].text.strip() if issue_date_results else 'Missing Data'
+                            issue_time = issue_time_results[0].text.strip() if issue_time_results else 'Missing Data'
+                            issue_date_time = issue_date + 'T' + issue_time 
+                            tags_xpaths = [
+                                (1, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:RegistrationName"),
+                                (2, "/ubl:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme/cbc:CompanyID"),
+                                (3, None),  
+                                (4, "/ubl:Invoice/cac:LegalMonetaryTotal/cbc:TaxInclusiveAmount"),
+                                (5, "/ubl:Invoice/cac:TaxTotal/cbc:TaxAmount"),
+                                (6, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignedInfo/ds:Reference/ds:DigestValue"),
+                                (7, "/ubl:Invoice/ext:UBLExtensions/ext:UBLExtension/ext:ExtensionContent/sig:UBLDocumentSignatures/sac:SignatureInformation/ds:Signature/ds:SignatureValue"),
+                                (8, None), 
+                                (9, None) ,
+                            ]
+                            result_dict = {}
+                            for tag, xpath in tags_xpaths:
+                                if isinstance(xpath, str):  
+                                    elements = root.xpath(xpath, namespaces=namespaces)
+                                    if elements:
+                                        value = elements[0].text if isinstance(elements[0], etree._Element) else elements[0]
+                                        result_dict[tag] = value
+                                    else:
+                                        result_dict[tag] = 'Not found'
+                                else:
+                                    result_dict[tag] = xpath  
+                            
+                            result_dict[3] = issue_date_time
+                            result_dict[8] = tag8_publickey()
+                            
+                            result_dict[9] = tag9_signature_ecdsa()
+                            
+                            return result_dict
+                    except Exception as e:
+                        frappe.throw(" error in getting the entire tlv data: "+ str(e) )
+
+
+def update_Qr_toXml(qrCodeB64):
+                    try:
+                        xml_file_path = frappe.local.site + "/private/files/final_xml_after_sign.xml"
+                        xml_tree = etree.parse(xml_file_path)
+                        qr_code_element = xml_tree.find('.//cac:AdditionalDocumentReference[cbc:ID="QR"]/cac:Attachment/cbc:EmbeddedDocumentBinaryObject', namespaces={'cac': 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2', 'cbc': 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2'})
+                        if qr_code_element is not None:
+                            qr_code_element.text =qrCodeB64
+                        else:
+                            frappe.msgprint("QR code element not found")
+
+                        xml_tree.write(xml_file_path, encoding="UTF-8", xml_declaration=True)
+                    except Exception as e:
+                            frappe.throw(" error in saving tlv data to xml: "+ str(e) )
+
+def structuring_signedxml():
+                try:
+                    with open(frappe.local.site + '/private/files/final_xml_after_sign.xml', 'r') as file:
+                        xml_content = file.readlines()
+                    indentations = {
+                        29: ['<xades:QualifyingProperties xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" Target="signature">','</xades:QualifyingProperties>'],
+                        33: ['<xades:SignedProperties Id="xadesSignedProperties">', '</xades:SignedProperties>'],
+                        37: ['<xades:SignedSignatureProperties>','</xades:SignedSignatureProperties>'],
+                        41: ['<xades:SigningTime>', '<xades:SigningCertificate>','</xades:SigningCertificate>'],
+                        45: ['<xades:Cert>','</xades:Cert>'],
+                        49: ['<xades:CertDigest>', '<xades:IssuerSerial>', '</xades:CertDigest>', '</xades:IssuerSerial>'],
+                        53: ['<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>', '<ds:DigestValue>', '<ds:X509IssuerName>', '<ds:X509SerialNumber>']
+                    }
+                    def adjust_indentation(line):
+                        for col, tags in indentations.items():
+                            for tag in tags:
+                                if line.strip().startswith(tag):
+                                    return ' ' * (col - 1) + line.lstrip()
+                        return line
+                    adjusted_xml_content = [adjust_indentation(line) for line in xml_content]
+                    with open(frappe.local.site + '/private/files/final_xml_after_indent.xml', 'w') as file:
+                        file.writelines(adjusted_xml_content)
+                    signed_xmlfile_name = frappe.local.site + '/private/files/final_xml_after_indent.xml'
+                    return signed_xmlfile_name
+                except Exception as e:
+                    frappe.throw(" error in structuring signed xml: "+ str(e) )
+                        
+def xml_base64_Decode(signed_xmlfile_name):
+                    try:
+                        with open(signed_xmlfile_name, "r") as file:
+                                        xml = file.read().lstrip()
+                                        base64_encoded = base64.b64encode(xml.encode("utf-8"))
+                                        base64_decoded = base64_encoded.decode("utf-8")
+                                        return base64_decoded
+                    except Exception as e:
+                        frappe.msgprint("Error in xml base64:  " + str(e) )
+
+def get_csid_for_company(basic_auth_data, company_name):
+                    try:     
+                        for entry in basic_auth_data.get("data", []):
+                            if entry.get("company") == company_name:
+                                return entry.get("csid")
+                        return None
+                    except Exception as e:
+                        frappe.throw("Error in getting csid for company:  " + str(e) )
+
+def compliance_api_call(uuid1,encoded_hash,signed_xmlfile_name):
+                try:
+                    settings = frappe.get_doc('Zatca KSA Setting')
+                    payload = json.dumps({
+                        "invoiceHash": encoded_hash,
+                        "uuid": uuid1,
+                        "invoice": xml_base64_Decode(signed_xmlfile_name) })
+                    company = settings.company
+                    company_name = frappe.db.get_value("Company", company, "abbr")
+                    basic_auth = settings.get("basic_auth", "{}")
+                    # frappe.msgprint(basic_auth)
+                    basic_auth_data = json.loads(basic_auth)
+                    csid = get_csid_for_company(basic_auth_data, company_name)
+                    # frappe.msgprint(csid)
+                    if csid:
+                        headers = {
+                            'accept': 'application/json',
+                            'Accept-Language': 'en',
+                            'Accept-Version': 'V2',
+                            'Authorization': "Basic " + csid,
+                            'Content-Type': 'application/json'
+                        }
+                    else:
+                        frappe.throw("CSID for company {} not found".format(company_name))
+                    try:
+                        # frappe.throw("inside compliance api call2")
+                        response = requests.request("POST", url=get_API_url(base_url="compliance/invoices"), headers=headers, data=payload)
+                        frappe.msgprint(response.text)
+
+                        # return response.text
+
+                        if response.status_code != 200:
+                            frappe.throw("Error in complaince: " + str(response.text))    
+                    
+                    except Exception as e:
+                        frappe.msgprint(str(e))
+                        return "error in compliance", "NOT ACCEPTED"
+                except Exception as e:
+                    frappe.throw("ERROR in clearance invoice ,zatca validation:  " + str(e) )
+                                
+def get_request_id_for_company(compliance_request_id_data, company_name):
+                try:
+                    for entry in compliance_request_id_data.get("data", []):
+                        if entry.get("company") == company_name:
+                            return str(entry.get("request_id"))
+                    frappe.throw("Error while retrieving  request id of company for production:  " + str(e) )
+                except Exception as e:
+                        frappe.throw("Error in getting request id of company for production:  " + str(e) )
+
+@frappe.whitelist(allow_guest=True)                   
+def production_CSID():    
+                try:
+                    settings = frappe.get_doc('Zatca KSA Setting')
+                    company = settings.company
+                    company_name = frappe.db.get_value("Company", company, "abbr")
+                    basic_auth = settings.get("basic_auth", "{}")
+                    # frappe.msgprint(basic_auth)
+                    basic_auth_data = json.loads(basic_auth)
+                    csid = get_csid_for_company(basic_auth_data, company_name)
+                    compliance_request_id = settings.get("compliance_request_id", "{}")
+                    compliance_request_id_data = json.loads(compliance_request_id)
+                    request_id = get_request_id_for_company(compliance_request_id_data, company_name)
+                    payload = json.dumps({
+                            "compliance_request_id": request_id
+                        })
+                    headers = {
+                    'accept': 'application/json',
+                    'Accept-Version': 'V2',
+                    'Authorization': 'Basic'+ csid,
+                    # 'Authorization': 'Basic'+ "VkZWc1NsRXhTalpSTUU1Q1dsaHNibEZZWkVwUmEwWnVVMVZrUWxkWWJGcFhhazAxVTJzeFFtSXdaRVJSTTBaSVZUQXdNRTlWU2tKVVZVNU9VV3hXTkZKWWNFSlZhMHB1Vkd4YVExRlZNVTVSTWpGWFUyMUtkVmR1V21oV01EVjNXVzB4YW1Rd2FHOVpNRFZPWVdzeE5GUlhjRXBsYXpGeFVWaHdVRlpGYkRaV01taHFWR3N4Y1ZvemFFNWhhMncxVkZkd1JtUXdNVVZSV0dSWVlXdEpNVlJXUm5wa01FNVNWMVZTVjFWV1JraFNXR1JMVmtaR1ZWSldiRTVSYkd4SVVWUkdWbEpWVGpOa01VSk9aV3RHTTFReFVtcGtNRGxGVVZSS1RsWkZSak5VVlZKQ1pXc3hWRm96WkV0YU1XeEZWbXhHVWxNd1VrTlBWVXBzVWpKNE5sTlZWbk5rVjAxNlVXMTRXazB4U25kWmFra3dXakZGZVU5WVZtdFRSWEJ2VjFST1UyTkhTblJaTW1SVVlrVTFSVlJXVGxwa01IQkNWMVZTVjFWV1JrVlNSVWw0VmxaVmVGVllVbEJTUjJONVZHdFNUbVZGTVZWVlZFWk5Wa1V4TTFSVlVuSk5NREZGV2pOa1QyRnJWak5VVlZKQ1pEQXhObEZzWkU1UmEwWklVVzVzZUZJeFRrNU9SR3hDV2pCV1NGRnNUakZSYTBwQ1VWVjBRazFGYkVKUmEzaFNZVWhDV1UxRlNrVmtSVVpTVDFWS05rOUhaM2ROYms1M1ZrWkdTbFZWVGpKT1YyYzBWRmhHTkdGRVVuQlRSVEYzVVcwNGRsRnRPWEJXUm1ScllsTjBVMWRYV2t0aVZYQlBaR3BrV1dSdVZUVk5NbHAyVjFjME1FNVVhRTlTTVVwdVltNW5NazVIV2xkaGJUbFdUREZDTVdGdFpHcFhXR1J1V1RBeE0xSkZSbHBTUmxwVFRVWlNRbFZWWjNaUmEwWktaREJHUlZFd1NucGFNV3hGVm14SmQxVnJTa3BTTTBaT1UxVmtkV05GYkVoaE1ERktVakpvVGxaSVRqTlVNVVphVWtaYVVsVlZWa1ZTUld3MFZFWmFVMVpHV2tsa00yeE5WbXhLVlZacmFETmxhM2hZVm0xMFRtRnJjSFJVVm1SU1RrVjRXRlpVU2xwV1JXd3dWRlpTUm1WRk9VUk5SRlphWVd4Vk1GUkdaRkpPVm14VllVY3hUbFpGV25OVWExSlNUVlp3Y1ZKWFdrNVJha0pJVVRKa2RGVXdjSFppVmxFMFlWaG9jbEZXUmtaVVZWSTJWRmhrVGxKSGMzcFVWVkp1WkRBMWNWSllaRTVTUlVZelZGaHdSbFJyTVVKak1HUkNUVlpXUmxKRlJqTlNWVEZWVWxob1RsWkZWbE5VVlVVMFVqQkZlRlpWVmtoYU0yUktWbGQ0UzFVeFNrVlRWRlpPWVcxME5GTkljRUphUlVwdVZHeGFRMUZVYUU1U2JYaExZa1pzV0dReVpHRlhSVFIzVjFab1UySkZiRWhTYlhCclVqSjNlVmxXYUZOalJuQlpWRmhrUkZveGJFcFRNamxoVTFod2NVMUZWa0prTUd4RlZURkdRbVF4U201VFYyaENWRmhHVTFOclJYSlZSRTVKVkVac2FWUXdNRFJPVldoTFRETmtUMlZ0UmxkT01XUnFXbTVKZGxkcVRqRmpWR3hMVFRCV1ZHTnNXbHBsYTBad1VsVkdkazV0YUdwUFZGSlRVMGR3YldRelRuZFpVemwzVjBaYWRWWnBPWFpWVjBaT1QxUk9hVTVzU1RKaVYyUmhWMFJDTVZGV1RYbE5WVnB1VUZFOVBRPT06eXRabHl6YklXY0wrUHlETytFd1JqWHRHSEp4SHB3cXdJYUVsaGxMQVJZQT0=",
+                    # 'Authorization': 'Basic'+ "VFVsSlExSjZRME5CWlhsblFYZEpRa0ZuU1VkQldYbFpXak01U2sxQmIwZERRM0ZIVTAwME9VSkJUVU5OUWxWNFJYcEJVa0puVGxaQ1FVMU5RMjFXU21KdVduWmhWMDV3WW0xamQwaG9ZMDVOYWsxNFRXcEplazFxUVhwUFZFbDZWMmhqVGsxcVozaE5ha2w1VFdwRmQwMUVRWGRYYWtJMVRWRnpkME5SV1VSV1VWRkhSWGRLVkZGVVJWbE5RbGxIUVRGVlJVTjNkMUJOZWtGM1QxUmpkMDlFUVRKTlZFRjNUVVJCZWsxVFozZEtaMWxFVmxGUlMwUkNPVUpsUjJ4NlNVVnNkV016UW14Wk0xSndZakkwWjFFeU9YVmtTRXBvV1ROU2NHSnRZMmRUYkU1RVRWTlpkMHBCV1VSV1VWRkVSRUl4VlZVeFVYUlBSR2N5VGtSTmVFMVVVVEZNVkUxM1RVUnJNMDFFWjNkT2FrVjNUVVJCZDAxNlFsZE5Ra0ZIUW5seFIxTk5ORGxCWjBWSFFsTjFRa0pCUVV0Qk1FbEJRa3hSYUhCWU1FSkVkRUZST1VKNk9HZ3dNbk53VkZGSlVVTjJOV2c0VFhGNGFEUnBTRTF3UW04dlFtOXBWRmRrYlN0U1dXWktiVXBPZGpkWWRuVTVNMlp2V1c0ME5UaE9SMUpuYm5nMk5HWldhbTlWTDFCMWFtZGpXWGRuWTAxM1JFRlpSRlpTTUZSQlVVZ3ZRa0ZKZDBGRVEwSnpaMWxFVmxJd1VrSkpSM0ZOU1VkdWNFbEhhMDFKUjJoTlZITjNUMUZaUkZaUlVVVkVSRWw0VEZaU1ZGWklkM2xNVmxKVVZraDNla3hYVm10TmFrcHRUVmRSTkV4WFZUSlpWRWwwVFZSRmVFOURNRFZaYWxVMFRGZFJOVmxVYUcxTlZFWnNUa1JSTVZwcVJXWk5RakJIUTJkdFUwcHZiVlE0YVhoclFWRkZUVVI2VFhkTlJHc3pUVVJuZDA1cVJYZE5SRUYzVFhwRlRrMUJjMGRCTVZWRlJFRjNSVTFVUlhoTlZFVlNUVUU0UjBFeFZVVkhaM2RKVld4S1UxSkVTVFZOYW10NFNIcEJaRUpuVGxaQ1FUaE5SbXhLYkZsWGQyZGFXRTR3V1ZoU2JFbEhSbXBrUjJ3eVlWaFNjRnBZVFhkRFoxbEpTMjlhU1hwcU1FVkJkMGxFVTFGQmQxSm5TV2hCVFhGU1NrRXJVRE5JVEZsaVQwMDROVWhLTDNkT2VtRldOMWRqWm5JdldqTjFjVGxLTTBWVGNsWlpla0ZwUlVGdk5taGpPVFJTU0dwbWQzTndZUzl3V0ZadVZpOXZVV0ZOT1ROaU5sSTJiV2RhV0RCMVFWTXlNVVpuUFE9PTp5dFpseXpiSVdjTCtQeURPK0V3UmpYdEdISnhIcHdxd0lhRWxobExBUllBPQ==",
+                    'Content-Type': 'application/json' }
+                    response = requests.request("POST", url=get_API_url(base_url="production/csids"), headers=headers, data=payload)
+                    frappe.msgprint(response.text)
+                    if response.status_code != 200:
+                        frappe.throw("Error in production: " + str(response.text))
+                    data=json.loads(response.text)
+                    concatenated_value = data["binarySecurityToken"] + ":" + data["secret"]
+                    encoded_value = base64.b64encode(concatenated_value.encode()).decode()
+
+                    settings.set("certificate",base64.b64decode(data["binarySecurityToken"]).decode('utf-8'))
+                    settings.save(ignore_permissions=True)
+                    basic_auth_production = settings.get("basic_auth_production", "{}")
+                    try:
+                        basic_auth_production_data = json.loads(basic_auth_production)
+                    except json.JSONDecodeError:
+                        basic_auth_production_data = {"companies": []}
+                    except:
+                        basic_auth_production_data = {"companies": []}
+                    # frappe.msgprint(basic_auth_production_data)
+
+                    updated_data = update_json_data_production_csid(basic_auth_production_data, company_name, encoded_value)
+                    settings.set("basic_auth_production", json.dumps(updated_data))
+                    settings.save(ignore_permissions=True)
+                except Exception as e:
+                    frappe.throw("error in  production csid formation:  " + str(e) )
+
+
+def get_Reporting_Status(result):
+                    try:
+                        json_data = json.loads(result.text)
+                        reporting_status = json_data.get("reportingStatus")
+                        print("reportingStatus: " + reporting_status)
+                        return reporting_status
+                    except Exception as e:
+                        print(e) 
+
+
+def success_Log(response,uuid1,invoice_number):
+                    try:
+                        current_time = frappe.utils.now()
+                        frappe.get_doc({
+                            "doctype": "Zatca KSA Success Log",
+                            "title": "Zatca invoice call done successfully",
+                            "message": "This message by Zatca Compliance",
+                            "uuid": uuid1,
+                            "invoice_number": invoice_number,
+                            "time": current_time,
+                            "zatca_response": response  
+                            
+                        }).insert(ignore_permissions=True)
+                    except Exception as e:
+                        frappe.throw("Error in success log  " + str(e))
+
+def error_Log():
+                    try:
+                        frappe.log_error(title='Zatca invoice call failed in clearance status',message=frappe.get_traceback())
+                    except Exception as e:
+                        frappe.throw("Error in error log  " + str(e))   
+
+
+def get_production_csid_for_company(basic_auth_production_data, company_name):
+                    try:  
+                        for entry in basic_auth_production_data.get("companies", []):
+                            if entry.get("company") == company_name:
+                                return entry.get("production_csid")
+                        return None
+                    except Exception as e:
+                            frappe.throw("Error in getting production csid of company for api   " + str(e)) 
+
+
+def update_json_data_pih(existing_data, company_name, pih):
+                    try:
+                        company_exists = False
+                        for entry in existing_data["data"]:
+                            if entry["company"] == company_name:
+                                # Update the PIH for the existing company
+                                entry["pih"] = pih
+                                company_exists = True
+                                break
+                        if not company_exists:
+                            existing_data["data"].append({
+                                "company": company_name,
+                                "pih": pih
+                            })
+                        return existing_data
+                    except Exception as e:
+                                        frappe.throw("Error in json data of pih  " + str(e)) 
+
+def attach_QR_Image(qrCodeB64,sales_invoice_doc):
+                    try:
+                        qr = pyqrcode.create(qrCodeB64)
+                        temp_file_path = "qr_code.png"
+                        qr_image=qr.png(temp_file_path, scale=5)
+                        file = frappe.get_doc({
+                            "doctype": "File",
+                            "file_name": f"QR_image_{sales_invoice_doc.name}.png",
+                            "attached_to_doctype": sales_invoice_doc.doctype,
+                            "attached_to_name": sales_invoice_doc.name,
+                            "content": open(temp_file_path, "rb").read()
+                           
+                        })
+                        file.save(ignore_permissions=True)
+                    except Exception as e:
+                        frappe.throw("error in qrcode from xml:  " + str(e) )
+
+def reporting_API(uuid1,encoded_hash,signed_xmlfile_name,invoice_number,sales_invoice_doc):
+                    try:
+                        settings = frappe.get_doc('Zatca KSA Setting')
+                        company = settings.company
+                        company_name = frappe.db.get_value("Company", company, "abbr")
+                        payload = json.dumps({
+                        "invoiceHash": encoded_hash,
+                        "uuid": uuid1,
+                        "invoice": xml_base64_Decode(signed_xmlfile_name),
+                        })
+                        basic_auth_production = settings.get("basic_auth_production", "{}")
+                        basic_auth_production_data = json.loads(basic_auth_production)
+                        production_csid = get_production_csid_for_company(basic_auth_production_data, company_name)
+
+                        if production_csid:
+                            headers = {
+                                'accept': 'application/json',
+                                    'accept-language': 'en',
+                                    'Clearance-Status': '0',
+                                    'Accept-Version': 'V2',
+                                    # 'Authorization': "Basic VFVsSlJESjZRME5CTkVOblFYZEpRa0ZuU1ZSaWQwRkJaSEZFYlVsb2NYTnFjRzAxUTNkQlFrRkJRakp2UkVGTFFtZG5jV2hyYWs5UVVWRkVRV3BDYWsxU1ZYZEZkMWxMUTFwSmJXbGFVSGxNUjFGQ1IxSlpSbUpIT1dwWlYzZDRSWHBCVWtKbmIwcHJhV0ZLYXk5SmMxcEJSVnBHWjA1dVlqTlplRVo2UVZaQ1oyOUthMmxoU21zdlNYTmFRVVZhUm1ka2JHVklVbTVaV0hBd1RWSjNkMGRuV1VSV1VWRkVSWGhPVlZVeGNFWlRWVFZYVkRCc1JGSlRNVlJrVjBwRVVWTXdlRTFDTkZoRVZFbDVUVVJOZVU5RVJURk9SRmw2VFd4dldFUlVTWGxOUkUxNlRVUkZNVTVFV1hwTmJHOTNWRlJGVEUxQmEwZEJNVlZGUW1oTlExVXdSWGhFYWtGTlFtZE9Wa0pCYjFSQ1ZYQm9ZMjFzZVUxU2IzZEhRVmxFVmxGUlRFVjRSa3RhVjFKcldWZG5aMUZ1U21oaWJVNXZUVlJKZWs1RVJWTk5Ra0ZIUVRGVlJVRjRUVXBOVkVrelRHcEJkVTFETkhoTlJsbDNSVUZaU0V0dldrbDZhakJEUVZGWlJrczBSVVZCUVc5RVVXZEJSVVF2ZDJJeWJHaENka0pKUXpoRGJtNWFkbTkxYnpaUGVsSjViWGx0VlRsT1YxSm9TWGxoVFdoSFVrVkNRMFZhUWpSRlFWWnlRblZXTW5oWWFYaFpOSEZDV1dZNVpHUmxjbnByVnpsRWQyUnZNMGxzU0dkeFQwTkJhVzkzWjJkSmJVMUpSMHhDWjA1V1NGSkZSV2RaVFhkbldVTnJabXBDT0UxU2QzZEhaMWxFVmxGUlJVUkNUWGxOYWtsNVRXcE5lVTVFVVRCTmVsRjZZVzFhYlU1RVRYbE5VamgzU0ZGWlMwTmFTVzFwV2xCNVRFZFJRa0ZSZDFCTmVrVjNUVlJqTVUxNmF6Tk9SRUYzVFVSQmVrMVJNSGREZDFsRVZsRlJUVVJCVVhoTlJFVjRUVkpGZDBSM1dVUldVVkZoUkVGb1ZGbFhNWGRpUjFWblVsUkZXazFDWTBkQk1WVkZSSGQzVVZVeVJuUmpSM2hzU1VWS01XTXpUbkJpYlZaNlkzcEJaRUpuVGxaSVVUUkZSbWRSVldoWFkzTmlZa3BvYWtRMVdsZFBhM2RDU1V4REszZE9WbVpMV1hkSWQxbEVWbEl3YWtKQ1ozZEdiMEZWWkcxRFRTdDNZV2R5UjJSWVRsb3pVRzF4ZVc1TE5Xc3hkRk00ZDFSbldVUldVakJtUWtWamQxSlVRa1J2UlVkblVEUlpPV0ZJVWpCalJHOTJURE5TZW1SSFRubGlRelUyV1ZoU2FsbFROVzVpTTFsMVl6SkZkbEV5Vm5sa1JWWjFZMjA1YzJKRE9WVlZNWEJHVTFVMVYxUXdiRVJTVXpGVVpGZEtSRkZUTUhoTWJVNTVZa1JEUW5KUldVbExkMWxDUWxGVlNFRlJSVVZuWVVGM1oxb3dkMkpuV1VsTGQxbENRbEZWU0UxQlIwZFpiV2d3WkVoQk5reDVPVEJqTTFKcVkyMTNkV1Z0UmpCWk1rVjFXakk1TWt4dVRtaE1NRTVzWTI1U1JtSnVTblppUjNkMlZrWk9ZVkpYYkhWa2JUbHdXVEpXVkZFd1JYaE1iVlkwWkVka2FHVnVVWFZhTWpreVRHMTRkbGt5Um5OWU1WSlVWMnRXU2xSc1dsQlRWVTVHVEZaT01WbHJUa0pNVkVWdlRWTnJkVmt6U2pCTlEzTkhRME56UjBGUlZVWkNla0ZDYUdnNWIyUklVbmRQYVRoMlpFaE9NRmt6U25OTWJuQm9aRWRPYUV4dFpIWmthVFY2V1ZNNWRsa3pUbmROUVRSSFFURlZaRVIzUlVJdmQxRkZRWGRKU0dkRVFXUkNaMDVXU0ZOVlJVWnFRVlZDWjJkeVFtZEZSa0pSWTBSQloxbEpTM2RaUWtKUlZVaEJkMDEzU25kWlNrdDNXVUpDUVVkRFRuaFZTMEpDYjNkSFJFRkxRbWRuY2tKblJVWkNVV05FUVdwQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVV0Q1oyZHhhR3RxVDFCUlVVUkJaMDVLUVVSQ1IwRnBSVUY1VG1oNVkxRXpZazVzVEVaa1QxQnNjVmxVTmxKV1VWUlhaMjVMTVVkb01FNUlaR05UV1RSUVprTXdRMGxSUTFOQmRHaFlkblkzZEdWMFZVdzJPVmRxY0RoQ2VHNU1URTEzWlhKNFdtaENibVYzYnk5blJqTkZTa0U5UFE9PTpmOVlSaG9wTi9HN3gwVEVDT1k2bktTQ0hMTllsYjVyaUFIU0ZQSUNvNHF3PQ==" ,
+                                    # 'Authorization': "Basic VFVsSlJESjZRME5CTkVOblFYZEpRa0ZuU1ZSaWQwRkJaSEZFYlVsb2NYTnFjRzAxUTNkQlFrRkJRakp2UkVGTFFtZG5jV2hyYWs5UVVWRkVRV3BDYWsxU1ZYZEZkMWxMUTFwSmJXbGFVSGxNUjFGQ1IxSlpSbUpIT1dwWlYzZDRSWHBCVWtKbmIwcHJhV0ZLYXk5SmMxcEJSVnBHWjA1dVlqTlplRVo2UVZaQ1oyOUthMmxoU21zdlNYTmFRVVZhUm1ka2JHVklVbTVaV0hBd1RWSjNkMGRuV1VSV1VWRkVSWGhPVlZVeGNFWlRWVFZYVkRCc1JGSlRNVlJrVjBwRVVWTXdlRTFDTkZoRVZFbDVUVVJOZVU5RVJURk9SRmw2VFd4dldFUlVTWGxOUkUxNlRVUkZNVTVFV1hwTmJHOTNWRlJGVEUxQmEwZEJNVlZGUW1oTlExVXdSWGhFYWtGTlFtZE9Wa0pCYjFSQ1ZYQm9ZMjFzZVUxU2IzZEhRVmxFVmxGUlRFVjRSa3RhVjFKcldWZG5aMUZ1U21oaWJVNXZUVlJKZWs1RVJWTk5Ra0ZIUVRGVlJVRjRUVXBOVkVrelRHcEJkVTFETkhoTlJsbDNSVUZaU0V0dldrbDZhakJEUVZGWlJrczBSVVZCUVc5RVVXZEJSVVF2ZDJJeWJHaENka0pKUXpoRGJtNWFkbTkxYnpaUGVsSjViWGx0VlRsT1YxSm9TWGxoVFdoSFVrVkNRMFZhUWpSRlFWWnlRblZXTW5oWWFYaFpOSEZDV1dZNVpHUmxjbnByVnpsRWQyUnZNMGxzU0dkeFQwTkJhVzkzWjJkSmJVMUpSMHhDWjA1V1NGSkZSV2RaVFhkbldVTnJabXBDT0UxU2QzZEhaMWxFVmxGUlJVUkNUWGxOYWtsNVRXcE5lVTVFVVRCTmVsRjZZVzFhYlU1RVRYbE5VamgzU0ZGWlMwTmFTVzFwV2xCNVRFZFJRa0ZSZDFCTmVrVjNUVlJqTVUxNmF6Tk9SRUYzVFVSQmVrMVJNSGREZDFsRVZsRlJUVVJCVVhoTlJFVjRUVkpGZDBSM1dVUldVVkZoUkVGb1ZGbFhNWGRpUjFWblVsUkZXazFDWTBkQk1WVkZSSGQzVVZVeVJuUmpSM2hzU1VWS01XTXpUbkJpYlZaNlkzcEJaRUpuVGxaSVVUUkZSbWRSVldoWFkzTmlZa3BvYWtRMVdsZFBhM2RDU1V4REszZE9WbVpMV1hkSWQxbEVWbEl3YWtKQ1ozZEdiMEZWWkcxRFRTdDNZV2R5UjJSWVRsb3pVRzF4ZVc1TE5Xc3hkRk00ZDFSbldVUldVakJtUWtWamQxSlVRa1J2UlVkblVEUlpPV0ZJVWpCalJHOTJURE5TZW1SSFRubGlRelUyV1ZoU2FsbFROVzVpTTFsMVl6SkZkbEV5Vm5sa1JWWjFZMjA1YzJKRE9WVlZNWEJHVTFVMVYxUXdiRVJTVXpGVVpGZEtSRkZUTUhoTWJVNTVZa1JEUW5KUldVbExkMWxDUWxGVlNFRlJSVVZuWVVGM1oxb3dkMkpuV1VsTGQxbENRbEZWU0UxQlIwZFpiV2d3WkVoQk5reDVPVEJqTTFKcVkyMTNkV1Z0UmpCWk1rVjFXakk1TWt4dVRtaE1NRTVzWTI1U1JtSnVTblppUjNkMlZrWk9ZVkpYYkhWa2JUbHdXVEpXVkZFd1JYaE1iVlkwWkVka2FHVnVVWFZhTWpreVRHMTRkbGt5Um5OWU1WSlVWMnRXU2xSc1dsQlRWVTVHVEZaT01WbHJUa0pNVkVWdlRWTnJkVmt6U2pCTlEzTkhRME56UjBGUlZVWkNla0ZDYUdnNWIyUklVbmRQYVRoMlpFaE9NRmt6U25OTWJuQm9aRWRPYUV4dFpIWmthVFY2V1ZNNWRsa3pUbmROUVRSSFFURlZaRVIzUlVJdmQxRkZRWGRKU0dkRVFXUkNaMDVXU0ZOVlJVWnFRVlZDWjJkeVFtZEZSa0pSWTBSQloxbEpTM2RaUWtKUlZVaEJkMDEzU25kWlNrdDNXVUpDUVVkRFRuaFZTMEpDYjNkSFJFRkxRbWRuY2tKblJVWkNVV05FUVdwQlMwSm5aM0pDWjBWR1FsRmpSRUY2UVV0Q1oyZHhhR3RxVDFCUlVVUkJaMDVLUVVSQ1IwRnBSVUY1VG1oNVkxRXpZazVzVEVaa1QxQnNjVmxVTmxKV1VWUlhaMjVMTVVkb01FNUlaR05UV1RSUVprTXdRMGxSUTFOQmRHaFlkblkzZEdWMFZVdzJPVmRxY0RoQ2VHNU1URTEzWlhKNFdtaENibVYzYnk5blJqTkZTa0U5UFE9PTpmOVlSaG9wTi9HN3gwVEVDT1k2bktTQ0hMTllsYjVyaUFIU0ZQSUNvNHF3PQ==",
+                                    # 'Authorization': 'Basic' + settings.basic_auth_production,
+                                    'Authorization': 'Basic' + production_csid,
+                                    'Content-Type': 'application/json',
+                                    'Cookie': 'TS0106293e=0132a679c0639d13d069bcba831384623a2ca6da47fac8d91bef610c47c7119dcdd3b817f963ec301682dae864351c67ee3a402866'
+                                    }    
+                        else:
+                            frappe.throw("Production CSID for company {} not found".format(company_name))
+                        try:
+                            response = requests.request("POST", url=get_API_url(base_url="invoices/reporting/single"), headers=headers, data=payload)
+                            if response.status_code  in (400,405,406,409 ):
+                                invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number )
+                                invoice_doc.db_set('custom_uuid' , 'Not Submitted' , commit=True  , update_modified=True)
+                                invoice_doc.db_set('custom_zatca_status' , 'Not Submitted' , commit=True  , update_modified=True)
+
+                                frappe.throw("Error: The request you are sending to Zatca is in incorrect format. Please report to system administrator . Status code:  " + str(response.status_code) + "<br><br> " + response.text )            
+                            
+                            
+                            if response.status_code  in (401,403,407,451 ):
+                                invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number  )
+                                invoice_doc.db_set('custom_uuid' , 'Not Submitted' , commit=True  , update_modified=True)
+                                invoice_doc.db_set('custom_zatca_status' , 'Not Submitted' , commit=True  , update_modified=True)
+
+                              
+                                frappe.throw("Error: Zatca Authentication failed. Your access token may be expired or not valid. Please contact your system administrator. Status code:  " + str(response.status_code) + "<br><br> " + response.text)            
+                            
+                            if response.status_code not in (200, 202):
+                                invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number  )
+                                invoice_doc.db_set('custom_uuid' , 'Not Submitted' , commit=True  , update_modified=True)
+                                invoice_doc.db_set('custom_zatca_status' , 'Not Submitted' , commit=True  , update_modified=True)
+                                
+                               
+                                frappe.throw("Error: Zatca server busy or not responding. Try after sometime or contact your system administrator. Status code:  " + str(response.status_code)+ "<br><br> " + response.text )
+                            
+                            
+                            
+                            if response.status_code  in (200, 202):
+                                if response.status_code == 202:
+                                    msg = "REPORTED WITH WARNIGS: <br> <br> Please copy the below message and send it to your system administrator to fix this warnings before next submission <br>  <br><br> "
+                                
+                                if response.status_code == 200:
+                                    msg = "SUCCESS: <br>   <br><br> "
+                                
+                                msg = msg + "Status Code: " + str(response.status_code) + "<br><br> "
+                                msg = msg + "Zatca Response: " + response.text + "<br><br> "
+                                frappe.msgprint(msg)
+                                pih_data = json.loads(settings.get("pih", "{}"))
+                                updated_pih_data = update_json_data_pih(pih_data, company_name, encoded_hash)
+                                settings.set("pih", json.dumps(updated_pih_data))
+                                settings.save(ignore_permissions=True)
+                                
+                                invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number )
+                                invoice_doc.db_set('custom_uuid' , uuid1 , commit=True  , update_modified=True)
+                                invoice_doc.db_set('custom_zatca_status' , 'REPORTED' , commit=True  , update_modified=True)
+
+                               
+                                # frappe.msgprint(xml_cleared)
+                                success_Log(response.text,uuid1, invoice_number)
+                                
+                            else:
+                                error_Log()
+                        except Exception as e:
+                            frappe.throw("Error in reporting api-2:  " + str(e) )
+    
+                    except Exception as e:
+                        frappe.throw("Error in reporting api-1:  " + str(e) )
+
+def clearance_API(uuid1,encoded_hash,signed_xmlfile_name,invoice_number,sales_invoice_doc):
+                    try:
+                        # frappe.msgprint("Clearance API")
+                        settings = frappe.get_doc('Zatca KSA Setting')
+                        company = settings.company
+                        company_name = frappe.db.get_value("Company", company, "abbr")
+                        payload = json.dumps({
+                        "invoiceHash": encoded_hash,
+                        "uuid": uuid1,
+                        "invoice": xml_base64_Decode(signed_xmlfile_name), })
+                        basic_auth_production = settings.get("basic_auth_production", "{}")
+                        basic_auth_production_data = json.loads(basic_auth_production)
+                        production_csid = get_production_csid_for_company(basic_auth_production_data, company_name)
+
+                        if production_csid:
+                            headers = {
+                            'accept': 'application/json',
+                            'accept-language': 'en',
+                            'Clearance-Status': '1',
+                            'Accept-Version': 'V2',
+                            'Authorization': 'Basic' + production_csid,
+                            # 'Authorization': 'Basic' + settings.basic_auth,
+                            'Content-Type': 'application/json',
+                            'Cookie': 'TS0106293e=0132a679c03c628e6c49de86c0f6bb76390abb4416868d6368d6d7c05da619c8326266f5bc262b7c0c65a6863cd3b19081d64eee99' }
+                        else:
+                            frappe.throw("Production CSID for company {} not found".format(company_name))
+                        response = requests.request("POST", url=get_API_url(base_url="invoices/clearance/single"), headers=headers, data=payload)
+                        
+                        # response.status_code = 400
+                        
+                        if response.status_code  in (400,405,406,409 ):
+                            invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number  )
+                            invoice_doc.db_set('custom_uuid' , "Not Submitted" , commit=True  , update_modified=True)
+                            invoice_doc.db_set('custom_zatca_status' , "Not Submitted" , commit=True  , update_modified=True)
+                            
+                           
+                            frappe.throw("Error: The request you are sending to Zatca is in incorrect format. Please report to system administrator . Status code:  " + str(response.status_code) + "<br><br> " + response.text )            
+                        
+                        
+                        if response.status_code  in (401,403,407,451 ):
+                            invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number  )
+                            invoice_doc.db_set('custom_uuid' , "Not Submitted" , commit=True  , update_modified=True)
+                            invoice_doc.db_set('custom_zatca_status' , "Not Submitted" , commit=True  , update_modified=True)
+
+                           
+                            frappe.throw("Error: Zatca Authentication failed. Your access token may be expired or not valid. Please contact your system administrator. Status code:  " + str(response.status_code) + "<br><br> " + response.text)            
+                        
+                        if response.status_code not in (200, 202):
+                            invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number  )
+                            invoice_doc.db_set('custom_uuid' , "Not Submitted" , commit=True  , update_modified=True)
+                            invoice_doc.db_set('custom_zatca_status' , "Not Submitted" , commit=True  , update_modified=True)
+
+                            
+                          
+                          
+                            
+                            frappe.throw("Error: Zatca server busy or not responding. Try after sometime or contact your system administrator. Status code:  " + str(response.status_code))
+                        
+                        if response.status_code  in (200, 202):
+                                if response.status_code == 202:
+                                    msg = "CLEARED WITH WARNIGS: <br> <br> Please copy the below message and send it to your system administrator to fix this warnings before next submission <br>  <br><br> "
+                                
+                                if response.status_code == 200:
+                                    msg = "SUCCESS: <br>   <br><br> "
+                                
+                                msg = msg + "Status Code: " + str(response.status_code) + "<br><br> "
+                                msg = msg + "Zatca Response: " + response.text + "<br><br> "
+                                frappe.msgprint(msg)
+                                pih_data = json.loads(settings.get("pih", "{}"))
+                                updated_pih_data = update_json_data_pih(pih_data, company_name,encoded_hash)
+                                settings.set("pih", json.dumps(updated_pih_data))
+                                settings.save(ignore_permissions=True)
+                                
+                                invoice_doc = frappe.get_doc('Sales Invoice' , invoice_number )
+                                invoice_doc.db_set('custom_uuid' , uuid1 , commit=True  , update_modified=True)
+                                invoice_doc.db_set('custom_zatca_status' , "CLEARED" , commit=True  , update_modified=True)
+                                
+                               
+                                
+                                data=json.loads(response.text)
+                                base64_xml = data["clearedInvoice"] 
+                                xml_cleared= base64.b64decode(base64_xml).decode('utf-8')
+                                file = frappe.get_doc({                       #attaching the cleared xml
+                                    "doctype": "File",
+                                    "file_name": "Cleared xml file" + sales_invoice_doc.name,
+                                    "attached_to_doctype": sales_invoice_doc.doctype,
+                                    "attached_to_name": sales_invoice_doc.name,
+                                    "content": xml_cleared
+                                    
+                                })
+                                file.save(ignore_permissions=True)
+                                # frappe.msgprint(xml_cleared)
+                                success_Log(response.text,uuid1, invoice_number)
+                                return xml_cleared
+                        else:
+                                error_Log()
+                            
+                    except Exception as e:
+                        frappe.throw("error in clearance api:  " + str(e) )
+
+
+@frappe.whitelist(allow_guest=True) 
+def zatca_Call(invoice_number, compliance_type="0", any_item_has_tax_template= False):
+        
+                    compliance_type = "0"
+                    try:    
+                            # create_compliance_x509()
+                            # frappe.throw("Created compliance x509 certificate")
+                            
+                            if not frappe.db.exists("Sales Invoice", invoice_number):
+                                frappe.throw("Invoice Number is NOT Valid:  " + str(invoice_number))
+                            invoice= xml_tags()
+                            invoice,uuid1,sales_invoice_doc=salesinvoice_data(invoice,invoice_number)
+                            customer_doc= frappe.get_doc("Customer",sales_invoice_doc.customer)
+                            if compliance_type == "0":
+                                    # frappe.throw(str("here 7 " + str(compliance_type))) 
+                                    if customer_doc.custom_b2c == 1:
+                                        invoice = invoice_Typecode_Simplified(invoice, sales_invoice_doc)
+                                    else:
+                                        invoice = invoice_Typecode_Standard(invoice, sales_invoice_doc)
+                            else:  # if it a compliance test
+                                # frappe.throw(str("here 8 " + str(compliance_type))) 
+                                invoice = invoice_Typecode_Compliance(invoice, compliance_type)
+                            
+                            invoice=doc_Reference(invoice,sales_invoice_doc,invoice_number)
+                            invoice=additional_Reference(invoice)
+                            invoice=company_Data(invoice,sales_invoice_doc)
+                            invoice=customer_Data(invoice,sales_invoice_doc)
+                            invoice=delivery_And_PaymentMeans(invoice,sales_invoice_doc, sales_invoice_doc.is_return) 
+                            if not any_item_has_tax_template:
+                                invoice = tax_Data(invoice, sales_invoice_doc)
+                            else:
+                                invoice = tax_Data_with_template(invoice, sales_invoice_doc)
+                            if not any_item_has_tax_template:
+                                invoice=item_data(invoice,sales_invoice_doc)
+                            else:
+                                   item_data_with_template(invoice,sales_invoice_doc)
+                            pretty_xml_string=xml_structuring(invoice,sales_invoice_doc)
+                            with open(frappe.local.site + "/private/files/finalzatcaxml.xml", 'r') as file:
+                                    file_content = file.read()
+                            tag_removed_xml = removeTags(file_content)
+                            canonicalized_xml = canonicalize_xml(tag_removed_xml)
+                            hash1, encoded_hash = getInvoiceHash(canonicalized_xml)
+                            encoded_signature = digital_signature(hash1)
+                            issuer_name,serial_number =extract_certificate_details()
+                            encoded_certificate_hash=certificate_hash()
+                            namespaces,signing_time=signxml_modify()
+                            signed_properties_base64=generate_Signed_Properties_Hash(signing_time,issuer_name,serial_number,encoded_certificate_hash)
+                            populate_The_UBL_Extensions_Output(encoded_signature,namespaces,signed_properties_base64,encoded_hash)
+                            tlv_data = generate_tlv_xml()
+                            # print(tlv_data)
+                            tagsBufsArray = []
+                            for tag_num, tag_value in tlv_data.items():
+                                tagsBufsArray.append(get_tlv_for_value(tag_num, tag_value))
+                            qrCodeBuf = b"".join(tagsBufsArray)
+                            # print(qrCodeBuf)
+                            qrCodeB64 = base64.b64encode(qrCodeBuf).decode('utf-8')
+                            # print(qrCodeB64)
+                            update_Qr_toXml(qrCodeB64)
+                            signed_xmlfile_name=structuring_signedxml()
+                            
+                            
+                            if compliance_type == "0":
+                                if customer_doc.custom_b2c == 1:
+                                    reporting_API(uuid1, encoded_hash, signed_xmlfile_name,invoice_number,sales_invoice_doc)
+                                    attach_QR_Image(qrCodeB64,sales_invoice_doc)
+                                else:
+                                    xml_cleared=clearance_API(uuid1, encoded_hash, signed_xmlfile_name,invoice_number,sales_invoice_doc)
+                                    attach_QR_Image(qrCodeB64,sales_invoice_doc)
+                            else:  # if it a compliance test
+                                # frappe.msgprint("Compliance test")
+                                compliance_api_call(uuid1, encoded_hash, signed_xmlfile_name)
+                                attach_QR_Image(qrCodeB64,sales_invoice_doc)
+                    except:       
+                            frappe.log_error(title='Zatca invoice call failed', message=frappe.get_traceback())
+                            
+@frappe.whitelist(allow_guest=True) 
+def zatca_Call_compliance(invoice_number, compliance_type="0",any_item_has_tax_template= False):
+                    # 0 is default. Not for compliance test. But normal reporting or clearance call.
+                    # 1 is for compliance test. Simplified invoice
+                    # 2 is for compliance test. Standard invoice
+                    # 3 is for compliance test. Simplified Credit Note
+                    # 4 is for compliance test. Standard Credit Note
+                    # 5 is for compliance test. Simplified Debit Note
+                    # 6 is for compliance test. Standard Debit Note
+                    settings = frappe.get_doc('Zatca KSA Setting')
+                    
+                    if settings.validation_type == "Simplified Invoice":
+                        compliance_type="1"
+                    elif settings.validation_type == "Standard Invoice":
+                        compliance_type="2"
+                    elif settings.validation_type == "Simplified Credit Note":
+                        compliance_type="3"
+                    elif settings.validation_type == "Standard Credit Note":
+                        compliance_type="4"
+                    elif settings.validation_type == "Simplified Debit Note":
+                        compliance_type="5"
+                    elif settings.validation_type == "Standard Debit Note":
+                        compliance_type="6"
+                    
+                    # frappe.throw("Compliance Type: " + compliance_type )
+                    try:    
+                            # create_compliance_x509()
+                            # frappe.throw("Created compliance x509 certificate")
+                            
+                            if not frappe.db.exists("Sales Invoice", invoice_number):
+                                frappe.throw("Invoice Number is NOT Valid:  " + str(invoice_number))
+                            
+                            
+                            invoice= xml_tags()
+                            invoice,uuid1,sales_invoice_doc=salesinvoice_data(invoice,invoice_number)
+                            
+                            customer_doc= frappe.get_doc("Customer",sales_invoice_doc.customer)
+                            
+                            
+                            invoice = invoice_Typecode_Compliance(invoice, compliance_type)
+                            
+                            invoice=doc_Reference_compliance(invoice,sales_invoice_doc,invoice_number,compliance_type)
+                            invoice=additional_Reference(invoice)
+                            invoice=company_Data(invoice,sales_invoice_doc)
+                            invoice=customer_Data(invoice,sales_invoice_doc)
+                            invoice=delivery_And_PaymentMeans_for_Compliance(invoice,sales_invoice_doc,compliance_type) 
+                            if not any_item_has_tax_template:
+                                invoice = tax_Data(invoice, sales_invoice_doc)
+                            else:
+                                invoice = tax_Data_with_template(invoice, sales_invoice_doc)
+                            if not any_item_has_tax_template:
+                                invoice=item_data(invoice,sales_invoice_doc)
+                            else:
+                                   item_data_with_template(invoice,sales_invoice_doc)
+                            pretty_xml_string=xml_structuring(invoice,sales_invoice_doc)
+                            with open(frappe.local.site + "/private/files/finalzatcaxml.xml", 'r') as file:
+                                    file_content = file.read()
+                            tag_removed_xml = removeTags(file_content)
+                            canonicalized_xml = canonicalize_xml(tag_removed_xml)
+                            hash1, encoded_hash = getInvoiceHash(canonicalized_xml)
+                            encoded_signature = digital_signature(hash1)
+                            issuer_name,serial_number =extract_certificate_details()
+                            encoded_certificate_hash=certificate_hash()
+                            namespaces,signing_time=signxml_modify()
+                            signed_properties_base64=generate_Signed_Properties_Hash(signing_time,issuer_name,serial_number,encoded_certificate_hash)
+                            populate_The_UBL_Extensions_Output(encoded_signature,namespaces,signed_properties_base64,encoded_hash)
+                            tlv_data = generate_tlv_xml()
+                            tagsBufsArray = []
+                            for tag_num, tag_value in tlv_data.items():
+                                tagsBufsArray.append(get_tlv_for_value(tag_num, tag_value))
+                            qrCodeBuf = b"".join(tagsBufsArray)
+                            qrCodeB64 = base64.b64encode(qrCodeBuf).decode('utf-8')
+                            update_Qr_toXml(qrCodeB64)
+                            signed_xmlfile_name=structuring_signedxml()
+                            compliance_api_call(uuid1, encoded_hash, signed_xmlfile_name)
+
+                    except:       
+                            frappe.log_error(title='Zatca invoice call failed', message=frappe.get_traceback())
+
+                
+@frappe.whitelist(allow_guest=True)                  
+def zatca_Background(invoice_number):
+                    
+                    try:
+                        # sales_invoice_doc = doc
+                        # invoice_number = sales_invoice_doc.name
+                        settings = frappe.get_doc('Zatca KSA Setting')
+                        sales_invoice_doc= frappe.get_doc("Sales Invoice",invoice_number )
+                        any_item_has_tax_template = any(item.item_tax_template for item in sales_invoice_doc.items)
+
+                        if any_item_has_tax_template:
+                            if not all(item.item_tax_template for item in sales_invoice_doc.items):
+                                frappe.throw("If any one item has an Item Tax Template, all items must have an Item Tax Template.")
+
+                        for item in sales_invoice_doc.items:
+                            if item.item_tax_template:
+                                item_tax_template = frappe.get_doc('Item Tax Template', item.item_tax_template)
+                                zatca_tax_category = item_tax_template.custom_zatca_tax_category
+                                for tax in item_tax_template.taxes:
+                                    tax_rate = float(tax.tax_rate)
+                                    
+                                    if f"{tax_rate:.2f}" not in ['5.00', '15.00'] and zatca_tax_category not in ["Zero Rated", "Exempted", "Services outside scope of tax / Not subject to VAT"]:
+                                        frappe.throw("Zatca tax category should be 'Zero Rated', 'Exempted' or 'Services outside scope of tax / Not subject to VAT' for items with tax rate not equal to 5.00 or 15.00.")
+                                    
+                                    if f"{tax_rate:.2f}" == '15.00' and zatca_tax_category != "Standard":
+                                        frappe.throw("Check the Zatca category code and enable it as standard.")
+                        
+                        if settings.zatca_invoice_enabled != 1:
+                            frappe.throw("Zatca Invoice is not enabled in Zatca Settings, Please contact your system administrator")
+                        
+                        if not frappe.db.exists("Sales Invoice", invoice_number):
+                                frappe.throw("Please save and submit the invoice before sending to Zatca:  " + str(invoice_number))
+                                
+            
+                        if sales_invoice_doc.docstatus in [0,2]:
+                            frappe.throw("Please submit the invoice before sending to Zatca:  " + str(invoice_number))
+                            
+                        if sales_invoice_doc.custom_zatca_status == "REPORTED" or sales_invoice_doc.custom_zatca_status == "CLEARED":
+                            frappe.throw("Already submitted to Zakat and Tax Authority")
+                        
+                        zatca_Call(invoice_number,0,any_item_has_tax_template)
+                        
+                    except Exception as e:
+                        frappe.throw("Error in background call:  " + str(e) )
+                    
+# #                     # frappe.enqueue(
+#                     #         zatca_Call,
+#                     #         queue="short",
+#                     #         timeout=200,
+#                     #         invoice_number=invoice_number)
+#                     # frappe.msgprint("queued")
+
+
+
+@frappe.whitelist(allow_guest=True)          
+def zatca_Background_on_submit(doc, method=None):              
+# def zatca_Background(invoice_number):
+                    
+                    try:
+                        sales_invoice_doc = doc
+                        invoice_number = sales_invoice_doc.name
+                        sales_invoice_doc= frappe.get_doc("Sales Invoice",invoice_number )
+                        settings = frappe.get_doc('Zatca KSA Setting')
+                        any_item_has_tax_template = False
+        
+                        for item in sales_invoice_doc.items:
+                            if item.item_tax_template:
+                                any_item_has_tax_template = True
+                                break
+                        
+                        if any_item_has_tax_template:
+                            for item in sales_invoice_doc.items:
+                                if not item.item_tax_template:
+                                    frappe.throw("If any one item has an Item Tax Template, all items must have an Item Tax Template.")
+
+                        for item in sales_invoice_doc.items:
+                            if item.item_tax_template:
+                                item_tax_template = frappe.get_doc('Item Tax Template', item.item_tax_template)
+                                zatca_tax_category = item_tax_template.custom_zatca_tax_category
+                                for tax in item_tax_template.taxes:
+                                    tax_rate = float(tax.tax_rate)
+                                    
+                                    if f"{tax_rate:.2f}" not in ['5.00', '15.00'] and zatca_tax_category not in ["Zero Rated", "Exempted", "Services outside scope of tax / Not subject to VAT"]:
+                                        frappe.throw("Zatca tax category should be 'Zero Rated', 'Exempted' or 'Services outside scope of tax / Not subject to VAT' for items with tax rate not equal to 5.00 or 15.00.")
+                                    
+                                    if f"{tax_rate:.2f}" == '15.00' and zatca_tax_category != "Standard":
+                                        frappe.throw("Check the Zatca category code and enable it as standard.")
+
+                        if settings.zatca_invoice_enabled != 1:
+                            frappe.throw("Zatca Invoice is not enabled in Zatca Settings, Please contact your system administrator")
+                        
+                        if not frappe.db.exists("Sales Invoice", invoice_number):
+                                frappe.throw("Please save and submit the invoice before sending to Zatca:  " + str(invoice_number))
+                                                
+                        
+            
+                        if sales_invoice_doc.docstatus in [0,2]:
+                            frappe.throw("Please submit the invoice before sending to Zatca:  " + str(invoice_number))
+                            
+                        if sales_invoice_doc.custom_zatca_status == "REPORTED" or sales_invoice_doc.custom_zatca_status == "CLEARED":
+                            frappe.throw("Already submitted to Zakat and Tax Authority")
+                        
+                        zatca_Call(invoice_number,0,any_item_has_tax_template)
+                        
+                    except Exception as e:
+                        frappe.throw("Error in background call:  " + str(e) )
+                    
+# #                     # frappe.enqueue(
+#                     #         zatca_Call,
+#                     #         queue="short",
+#                     #         timeout=200,
+#                     #         invoice_number=invoice_number)
+#                     # frappe.msgprint("queued")
+
+
diff --git a/zatca_ksa/zatca_ksa/validations.py b/zatca_ksa/zatca_ksa/validations.py
new file mode 100644
index 0000000..a78ba32
--- /dev/null
+++ b/zatca_ksa/zatca_ksa/validations.py
@@ -0,0 +1,23 @@
+import frappe
+
+def zatca_done_or_not(doc, method=None):
+        if doc.custom_zatca_status != "REPORTED" and doc.custom_zatca_status != "CLEARED":
+                frappe.throw("Please send this invoice to ZATCA, before submitting")
+                
+def before_save(doc, method=None):
+        if doc.custom_zatca_status in ("REPORTED", "CLEARED"):
+                frappe.throw("This invoice is already submitted to ZATCA. You cannot edit, cancel or save it.")
+
+def duplicating_invoice(doc, method=None):
+            # required on version 13  as no-copy settings on fields not available
+            # frappe.msgprint(frappe.__version__)
+            # frappe.msgprint(int(frappe.__version__.split('.')[0]))
+            if int(frappe.__version__.split('.')[0]) == 13:
+                    frappe.msgprint("duplicating invoice")
+                    doc.custom_uuid = "Not submitted"
+                    doc.custom_zatca_status = "Not Submitted"
+                    doc.save()
+
+def test_save_validate(doc, method=None):
+        # frappe.msgprint("test save validate")
+        frappe.msgprint("test save validated and stopped it here")
